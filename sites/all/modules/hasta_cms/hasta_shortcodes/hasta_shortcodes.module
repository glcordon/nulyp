<?php

/**
 * Implementation of hook_menu().
 */
function hasta_shortcodes_menu() {
  variable_set('nd_visualshortcodes_extra_css', drupal_get_path('module', 'hasta_shortcodes') . '/css/hasta_shortcodes.css');
  $items = array();
  return $items;
}

/**
 * Implementation of hook_shortcode_info() .
 * Using the same formatting as hook_filter_info()`
 */
function hasta_shortcodes_shortcode_info() {
  $shortcodes['nd_menu'] = array(
    'title' => t('Menu'),
    'process callback' => 'hasta_shortcodes_shortcode_menu',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_menu_settings',
    'icon' => 'fa fa-bars',
  );
  $shortcodes['nd_header'] = array(
    'title' => t('Header Title'),
    'process callback' => 'hasta_shortcodes_shortcode_header',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_header_settings',
    'icon' => 'fa fa-header',
    'description_field' => 'title',
  );
  $shortcodes['nd_header_top'] = array(
    'title' => t('Header Top'),
    'process callback' => 'hasta_shortcodes_shortcode_header_top',
    'process settings callback' => 'hasta_shortcodes_shortcode_header_top_settings',
    'icon' => 'fa fa-header',
    'description_field' => 'title',
  );
  $shortcodes['nd_view'] = array(
    'title' => t('View'),
    'description' => t('Embed content - rendered View.'),
    'process callback' => 'hasta_shortcodes_shortcode_view',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_view_settings',
    'icon' => 'fa fa-sun-o',
    'description_callback' => 'hasta_shortcodes_shortcode_view_description',
  );
  $shortcodes['nd_block'] = array(
    'title' => t('Block'),
    'description' => t('Render block.'),
    'process callback' => 'hasta_shortcodes_shortcode_block',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_block_settings',
    'icon' => 'fa fa-file',
    'description_callback' => 'hasta_shortcodes_shortcode_block_description',
  );
  $shortcodes['nd_node'] = array(
    'title' => t('Node'),
    'description' => t('Render node'),
    'process callback' => 'hasta_shortcodes_shortcode_node',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_node_settings',
    'icon' => 'fa fa-file-o',
    'description_callback' => 'hasta_shortcodes_shortcode_node_description',
  );
  $shortcodes['nd_container'] = array(
    'title' => t('Container 1170px'),
    'description' => t('Container for content.'),
    'process callback' => 'hasta_shortcodes_shortcode_container',
    'icon' => 'fa fa-hdd-o',
  );
  $shortcodes['nd_div'] = array(
    'title' => t('DIV Container'),
    'process callback' => 'hasta_shortcodes_shortcode_div',
    'icon' => 'fa fa-folder-o',
  );
  $shortcodes['row'] = array(
    'title' => t('Row for columns'),
    'description' => t('Container for cols.'),
    'process callback' => 'hasta_shortcodes_shortcode_row',
    'process backend callback' => 'nd_visualshortcodes_backend_row',
    'process settings callback' => 'hasta_shortcodes_shortcode_row_settings',
    'icon' => 'fa fa-th-large',
    'child shortcode' => 'col'
  );
  $shortcodes['col'] = array(
    'title' => t('Column'),
    'description' => t('Column with size settings'),
    'process callback' => 'hasta_shortcodes_shortcode_col',
    'process backend callback' => 'nd_visualshortcodes_backend_col',
    'process settings callback' => 'nd_visualshortcodes_shortcode_col_settings',
    'icon' => 'fa fa-columns'
  );
  $shortcodes['html'] = array(
    'title' => t('HTML'),
    'description' => t('HTML code'),
    'process callback' => 'hasta_shortcodes_shortcode_html',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_html_settings',
    'icon' => 'fa fa-code',
    'description_field' => 'text',
    'backend preview' => TRUE,
  );
  $shortcodes['nd_countdown'] = array(
    'title' => t('Countdown'),
    'process callback' => 'hasta_shortcodes_shortcode_countdown',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_countdown_settings',
    'icon' => 'fa fa-sort-numeric-asc',
  );
  $shortcodes['nd_button'] = array(
    'title' => t('Button link'),
    'process callback' => 'hasta_shortcodes_shortcode_button',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_button_settings',
    'icon' => 'fa fa-bold',
    'description_field' => 'text',
    'backend preview' => TRUE,
  );
    $shortcodes['nd_accordions'] = array(
    'title' => t('Accordion container'),
    'process callback' => 'hasta_shortcodes_shortcode_accordions',
    'process settings callback' => 'hasta_shortcodes_shortcode_accordions_settings',
    'child shortcode' => 'nd_accordion',
    'icon' => 'fa fa-bars',
  );
  $shortcodes['nd_accordion'] = array(
    'title' => t('Accordion item'),
    'process callback' => 'hasta_shortcodes_shortcode_accordion',
    'icon' => 'fa fa-minus',
    'description_field' => 'title',
    'child shortcode' => 'html',
  );
  $shortcodes['message_boxes'] = array(
  	'title' => t('Message box'),
  	'process callback' => 'hasta_shortcodes_shortcode_message_boxes',
	  'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
  	'process settings callback' => 'hasta_shortcodes_shortcode_message_boxes_settings',
  	'icon' => 'fa fa-tags',
  	'backend preview' => TRUE,
  );
  $shortcodes['image_hovers'] = array(
  	'title' => t('Image hover'),
  	'process callback' => 'hasta_shortcodes_shortcode_image_hovers',
  	'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
	  'process settings callback' => 'hasta_shortcodes_shortcode_image_hovers_settings',
  	'icon' => 'fa fa-picture-o',
  	'backend preview' => TRUE,
  );
   $shortcodes['nd_slider'] = array(
    'title' => t('Slider container'),
    'description' => t('Carousel slider'),
    'process callback' => 'hasta_shortcodes_shortcode_slider',
    'process settings callback' => 'hasta_shortcodes_shortcode_slider_settings',
    'icon' => 'fa fa-eye',
    'child shortcode' => 'nd_slider_item',
    'description_field' => 'type',
  );
  $shortcodes['nd_slider_item'] = array(
    'title' => t('Slider'),
    'description' => t('Slider item'),
    'process callback' => 'hasta_shortcodes_shortcode_slider_item',
    'icon' => 'fa fa-long-arrow-right',
  );
  $shortcodes['nd_image'] = array(
    'title' => t('Image'),
    'process callback' => 'hasta_shortcodes_shortcode_image',
    'process settings callback' => 'hasta_shortcodes_shortcode_image_settings',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'icon' => 'fa fa-file-image-o',
    'backend preview' => TRUE,
  );
  $shortcodes['nd_divider'] = array(
  	'title' => t('Divider'),
  	'process callback' => 'hasta_shortcodes_shortcode_divider',
  	'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
  	'process settings callback' => 'hasta_shortcodes_shortcode_divider_settings',
  	'icon' => 'fa fa-file-text',
  	'backend preview' => TRUE,
  );
  $shortcodes['social_icons_container'] = array(
    'title' => t('Social icons container'),
    'process callback' => 'hasta_shortcodes_shortcode_social_icons_container',
    'process settings callback' => 'hasta_shortcodes_shortcode_social_icons_container_settings',
    'icon' => 'fa fa-twitter',
    'child shortcode' => 'social_icon',
  );
  $shortcodes['social_icon'] = array(
    'title' => t('Social icon'),
    'process callback' => 'hasta_shortcodes_shortcode_social_icon',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_social_icon_settings',
    'icon' => 'fa fa-facebook',
    'backend preview' => TRUE,
  );
  $shortcodes['call_to_action'] = array (
    'title' => t('Call To Action'),
    'process callback' => 'hasta_shortcodes_shortcode_call_to_action',
    'icon' => 'fa fa-external-link-square',
  );
  $shortcodes['list_style_item'] = array(
    'title' => t('List Style Item'),
    'process callback' => 'hasta_shortcodes_shortcode_list_style_item',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_list_style_item_settings',
    'icon' => 'fa fa-list',
  );
  $shortcodes['parallax_background'] = array(
    'title' => t('Parallax Background'),
    'process callback' => 'hasta_shortcodes_shortcode_parallax_background', 
    'process settings callback' => 'hasta_shortcodes_shortcode_parallax_background_settings',
    'icon' => 'fa fa-cloud',
  );
  $shortcodes['pricing_table'] = array (
    'title' => t('Pricing Table'),
    'process callback' => 'hasta_shortcodes_shortcode_pricing_table',
    'process settings callback' => 'hasta_shortcodes_shortcode_pricing_table_settings',
    'icon' => 'fa fa-rocket',
    'child shortcode' => 'pricing_table_item',
  );
  $shortcodes['pricing_table_item'] = array(
    'title' => t('Pricing Table Item'),
    'process callback' => 'hasta_shortcodes_shortcode_pricing_table_item',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_pricing_table_item_settings',
    'icon' => 'fa fa-rocket',
  );
  $shortcodes['content_box'] = array(
    'title' => t('Content Box'),
    'process callback' => 'hasta_shortcodes_shortcode_content_box',
    'icon' => 'fa fa-flag',
  );
  $shortcodes['nd_tabs_container'] = array(
    'title' => t('Tabs Container'),
    'process callback' => 'hasta_shortcodes_shortcode_tabs_container',
    'process settings callback' => 'hasta_shortcodes_shortcode_tabs_container_settings',
    'icon' => 'fa fa-qrcode',
    'child shortcode' => 'nd_tab',
    'description_field' => 'type',
  );
  $shortcodes['nd_tab'] = array(
    'title' => t('Tab'),
    'process callback' => 'hasta_shortcodes_shortcode_tab',
    'process settings callback' => 'hasta_shortcodes_shortcode_tab_settings',
    'icon' => 'fa fa-qrcode',
    'description_field' => 'title',
    'child shortcode' => 'nd_tab_item',
  );
  $shortcodes['icon_box'] = array(
    'title' => t('Icon Box'),
    'process callback' => 'hasta_shortcodes_shortcode_icon_box',
    'process settings callback' => 'hasta_shortcodes_shortcode_icon_box_settings',
    'icon' => 'fa fa-pencil-square',
  );
  $shortcodes['nd_video'] = array(
    'title' => t('Video'),
    'process callback' => 'hasta_shortcodes_shortcode_video',
    'process settings callback' => 'hasta_shortcodes_shortcode_video_settings',
    'icon' => 'fa fa-video-camera',
    'description_field' => 'title',
  );
  $shortcodes['progress_bar'] = array(
    'title' => t('Progress Bar'),
    'process callback' => 'hasta_shortcodes_shortcode_progress_bar',
    'process settings callback' => 'hasta_shortcodes_shortcode_progress_bar_settings',
    'icon' => 'fa fa-tachometer',
  );
  $shortcodes['nd_quote'] = array(
    'title' => t('Quote'),
    'process callback' => 'hasta_shortcodes_shortcode_quote',
    'process settings callback' => 'hasta_shortcodes_shortcode_quote_settings',
    'icon' => 'fa fa-quote-left',
  );
  $shortcodes['info_box'] = array(
  	'title' => t('Info Box'),
  	'process callback' => 'hasta_shortcodes_shortcode_info_box',
  	'process settings callback' => 'hasta_shortcodes_shortcode_info_box_settings',
  	'icon' => 'fa fa-info',
  );
  $shortcodes['nd_section'] = array(
    'title' => t('Section Container'),
    'process callback' => 'hasta_shortcodes_shortcode_section',
    'icon' => 'fa fa-bars',
  );
  $shortcodes['logo_list'] = array(
    'title' => t('Logo List'),
    'process callback' => 'hasta_shortcodes_shortcode_logo_list',
    'process settings callback' => 'hasta_shortcodes_shortcode_logo_list_settings',
    'icon' => 'fa fa-list',
    'child shortcode' => 'logo_list_item',
  );
  $shortcodes['logo_list_item'] = array(
    'title' => t('Logo List Item'),
    'process callback' => 'hasta_shortcodes_shortcode_logo_list_item',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hasta_shortcodes_shortcode_logo_list_item_settings',
    'icon' => 'fa fa-list',
  );
  $shortcodes['video_bg'] = array(
    'title' => t('Video Background'),
    'process callback' => 'hasta_shortcodes_shortcode_video_bg',
    'process settings callback' => 'hasta_shortcodes_shortcode_video_bg_settings',
    'icon' => 'fa fa-video-camera',
  );
  $shortcodes['split_section'] = array(
    'title' => t('Split Section'),
    'process callback' => 'hasta_shortcodes_shortcode_split_section',
    'process settings callback' => 'hasta_shortcodes_shortcode_split_section_settings',
    'icon' => 'fa fa-columns',
  );
  $shortcodes['nd_gmap'] = array(
    'title' => t('Google Map'),
    'description' => t('Google Map'),
    'process callback' => 'hasta_shortcodes_shortcode_gmap',
    'process settings callback' => 'hasta_shortcodes_shortcode_gmap_settings',
    'icon' => 'fa fa-map-marker',
  );
  $shortcodes['nd_feature_step'] = array(
    'title' => t('Feature Step Box'),
    'process callback' => 'hasta_shortcodes_shortcode_feature_step',
    'icon' => 'fa fa-sort-numeric-asc',
  );
  $shortcodes['nd_title'] = array(
    'title' => t('Title'),
    'process callback' => 'hasta_shortcodes_shortcode_title',
    'child shortcode' => 'nd_sub_title',
    'icon' => 'fa fa-h-square',
    'description_field' => 'title',
    'backend preview' => TRUE,
  );
  $shortcodes['nd_sub_title'] = array(
    'title' => t('Sub-Title'),
    'process callback' => 'hasta_shortcodes_shortcode_sub_title',
    'icon' => 'fa fa-h-square',
    'description_field' => 'sub-title',
    'backend preview' => TRUE,
  );
  $shortcodes['nd_list'] = array(
    'title' => t('List'),
    'process callback' => 'hasta_shortcodes_shortcode_list',
    'process settings callback' => 'hasta_shortcodes_shortcode_list_settings',
    'icon' => 'fa fa-check',
    'child shortcode' => 'nd_list_item',
    'backend preview' => TRUE,
  );
  $shortcodes['nd_list_item'] = array(
    'title' => t('List Item'),
    'process callback' => 'hasta_shortcodes_shortcode_list_item',
    'process settings callback' => 'hasta_shortcodes_shortcode_list_item_settings',
    'icon' => 'fa fa-check',
    'backend preview' => TRUE,
  );
  return $shortcodes;
}

/**
 * Implements hook_theme().
 */
function hasta_shortcodes_theme($existing, $type, $theme, $path) {
  $theme = array(
    'hasta_project_next_prev' => array(
      'variables' => array('prev' => '', 'next' => '', 'all_works' => ''),
    ),
    'hasta_shortcodes_menu' => array(
      'variables' => array('menu' => '', 'logo' => '', 'no_logo' => FALSE, 'transparent' => 0, 'color' => 'dark', 'language' => FALSE, 'stick_fixed' => '', 'button' => ''),
      'template' => 'hasta-shortcodes-menu'
    )
  );
  return $theme;
}

function hasta_shortcodes_shortcode_menu($attrs, $text) {
  $color = isset($attrs['type']) ? $attrs['type'] : theme_get_setting('menu_color');
  $transparent = isset($attrs['transparent']) ? $attrs['transparent'] : theme_get_setting('menu_transparent');
  $search = isset($attrs['search']) ? $attrs['search'] : theme_get_setting('menu_search');
  $cart = isset($attrs['cart']) ? $attrs['cart'] : FALSE;
  $no_logo = isset($attrs['no_logo']) ? $attrs['no_logo'] : FALSE;
  $menu = isset($attrs['menu']) ? $attrs['menu'] : 'main-menu';
  $language = isset($attrs['language']) ? $attrs['language'] : FALSE;
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $logo = isset($file->uri) ? file_create_url($file->uri) : theme_get_setting('logo');
  $button ='';
  if ($no_logo && isset($attrs['button_title']) && isset($attrs['button_link'])) {
    $button = l(t($attrs['button_title']), $attrs['button_link'], array('attributes' => array('class' => array('btn', 'btn-orange-2', 'btn-xround', 'pull-right', 'top-margin'))));
  }

  $output = theme('hasta_shortcodes_menu', array('menu' => $menu, 'logo' => $logo, 'color' => $color, 'transparent' => $transparent, 'search' => $search, 'cart' => $cart, 'language' => $language, 'no_logo' => $no_logo, 'button' => $button));
  $attrs_output = _hasta_shortcodes_shortcode_attributes($attrs);
  if ($attrs_output) {
    $output = '<div ' . $attrs_output . '>' . $output . '</div>';
  }
  return $output;
}

function _hasta_cart_count() {
  global $user;
  $quantity = 0;
  $order = commerce_cart_order_load($user->uid);
  if ($order) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $wrapper->commerce_line_items;
    $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
  }
  return $quantity;
}

function hasta_shortcodes_shortcode_menu_settings($attrs, $text) {
  $menus = menu_get_menus();
  $form['menu'] = array(
    '#type' => 'select',
    '#title' => t('Menu'),
    '#default_value' => isset($attrs['menu']) ? $attrs['menu'] : '',
    '#options' => $menus,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $form['no_logo'] = array(
    '#type' => 'checkbox',
    '#title' => t('No Logo'),
    '#default_value' => isset($attrs['no_logo']) ? $attrs['no_logo'] : FALSE,
    '#prefix' => '</div><div class = "col-sm-4">',
  );
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $filename = isset($file->uri) ? $file->uri : '';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
    '#states' => array (
      'visible' => array(
        'input[name="no_logo"]' => array('checked' => FALSE),
      ),
    )
  );
  $types = array('' => t('White'), 'dark' => t('Dark'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Background Type'),
    '#options' => $types,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : 'white',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
    '#suffix' => '</div></div>'
  );
  $states = array (
    'visible' => array(
      'input[name="no_logo"]' => array('checked' => TRUE),
    ),
  );
  $form['button_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Button Title'),
    '#default_value' => isset($attrs['button_title']) ? $attrs['button_title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
    '#states' => $states
  );
  $form['button_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Button Link'),
    '#default_value' => isset($attrs['button_link']) ? $attrs['button_link'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
    '#states' => $states
  );
  return $form;
}

function _hasta_shortcodes_shortcode_attributes($attrs) {
  if(empty($attrs)) {
    return '';
  }
  $allowed_attributes = array('class' => 'class', 'href' => 'href', 'id' => 'id', 'animation' => 'class', 'animation_delay' => 'data-wow-duration', 'data-background' => 'data-background', 'style' => 'style', 'extra_style' => 'style');
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : ''; 
  if (isset($attrs['link']) && $attrs['link'] == $_GET['q']) {
    $attrs['class'] .= ' active'; 
  }
  if (isset($attrs['animation']) && $attrs['animation']) {
    $attrs['class'] .= ' wow'; 
  }

  $attrs['class'] .= isset($attrs['extra_classes']) ? ' ' . $attrs['extra_classes'] : '';
  $output = '';
  $attrs_array = array('class' => '');
  foreach($attrs as $name => $value) {
    $value = trim($value);
    if(strpos($name, 'style_') === 0) {
      $value_style = str_replace(array('style_', '_'), array('', '-'), $name);
      if(strpos($value_style, 'border-radius') !== FALSE) {
        $value = strpos($value, '%') !== FALSE ? $value : (int)$value . 'px;';
        $value = '-webkit-' . $value_style. ': ' . $value . '; -moz-' . $value_style. ': ' . $value . '; ' . $value_style. ': ' . $value . ';';
      }
      elseif(strpos($name, 'margin') !== FALSE || strpos($name, 'padding') !== FALSE || strpos($name, 'width') !== FALSE || strpos($name, 'height') !== FALSE) {
        $value = strpos($value, '%') !== FALSE ? $value : (int)$value . 'px;';
        $value =  $value_style . ': ' . $value;
      }
      elseif(strpos($name, 'color') !== FALSE) {
        $value =  $value_style . ': #' . trim($value, '#') . ';';
      }
      elseif(strpos($value_style, 'image') !== FALSE) {
        $file = file_load($value);
        $filename = isset($file->uri) ? file_create_url($file->uri) : '';
        $value =  $value_style . ': url("' . $filename . '");';
      }
      else {
        $value = $value_style . ': ' . $value . ';';
      }
      $name = 'style';
    }
    if(isset($allowed_attributes[$name])) {
      $name = $allowed_attributes[$name];
      if ($value !== '') {
        $attrs_array[$name] = (isset($attrs_array[$name]) ? $attrs_array[$name] . ' ' : '') . $value;
      }
    }
    elseif(strpos($name, 'data-') === 0) {
      if ($value !== '') {
        $attrs_array[$name] = (isset($attrs_array[$name]) ? $attrs_array[$name] . ' ' : '') . $value;
      }
    }
  }
  if(isset($attrs['style_background_color']) && strtolower(trim($attrs['style_background_color'], '#')) == '000000') {
    $attrs_array['class'] .= ' text-white';
  }
  if(isset($attrs['style_background_color']) && strtolower(trim($attrs['style_background_color'], '#')) == 'ffffff') {
    $attrs_array['class'] .= ' text-black';
  }
  if(isset($attrs['text_align']) && $attrs['text_align']) {
    $attrs_array['style'] = (isset($attrs_array['style']) ? $attrs_array['style'] : '') . ' text-align:'. $attrs['text_align'] . ';';
    $attrs_array['class'] .= ' text-center';
  }

  foreach($attrs_array as $name => $value) {
    if($value) {
      $output .= " $name = '$value'";
    }
  }
  return $output;
}

function hasta_shortcodes_shortcode_view($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $view = '';
  if (strpos($attrs['admin_url'], 'admin/structure/views/view') !== FALSE) {
    $view_name = substr($attrs['admin_url'], strpos($attrs['admin_url'], 'view/') + 5);
    $parts = explode('/', $view_name);
    $view_name = $parts[0];
    $view = isset($parts[2]) ? views_embed_view($view_name, $parts[2]) : views_embed_view($view_name);
  }
  $text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs)  . '>' . $view . '</div>';
  return $text;
}

function hasta_shortcodes_shortcode_view_tip($format, $long) {
  $output = array();
  $output[] = '<p><strong>View embed:</strong><br/>[view admin_url="admin/structure/views/view/blog"][/view]<br/>';
  $output[] = '<strong>admin_url</strong> - Administrative url of required view display.</p>';
  return implode(' ', $output);
}

function hasta_shortcodes_shortcode_view_description($attrs, $text) {
  if (strpos($attrs['admin_url'], 'admin/structure/views/view') !== FALSE) {
    $form = hasta_shortcodes_shortcode_view_settings($attrs, $text);
    $value = l($form['admin_url']['#options'][$attrs['admin_url']], $attrs['admin_url'], array('attributes' => array('target' => '_blank')));
    return $value;
  }
}

function hasta_shortcodes_shortcode_view_settings($attrs, $text) {
  $query = db_select('views_display', 'v');
  $query->leftJoin('views_view', 'vv', 'vv.vid = v.vid');
  $return = $query
    ->fields('v', array('id', 'display_title'))
    ->fields('vv', array('name', 'human_name'))
    ->condition('v.display_title', 'Master', '<>')
    ->execute();
  $views = array();
  foreach ($return as $row) {
    $views['admin/structure/views/view/' . $row->name . '/edit/' . $row->id] = check_plain($row->human_name . ': ' . $row->display_title);
  }
  asort($views);
  $form['admin_url'] = array(
    '#title' => t('View'),
    '#type' => 'select',
    '#options' => $views,
    '#default_value' => isset($attrs['admin_url']) ? $attrs['admin_url'] : '',
    '#attributes' => array('class' => array('form-control'))
  );
  return $form;
}

function hasta_shortcodes_shortcode_block($attrs, $text) {
  if (strpos($attrs['admin_url'], 'admin/structure/block') !== FALSE) {
    $block_name = substr($attrs['admin_url'], strpos($attrs['admin_url'], '/manage/') + 8);
    $parts = explode('/', $block_name);
    $block = _nikadevs_render_block($parts[0], $parts[1]);
    $block = render($block);
  }
  $attrs_output = _hasta_shortcodes_shortcode_attributes($attrs);
  $text = $attrs_output ? '<div ' . $attrs_output  . '>' . $block . '</div>' : $block;
  return $text;
}

function hasta_shortcodes_shortcode_block_tip($format, $long) {
  $output = array();
  $output[] = '<p><strong>Block:</strong><br/>[block admin_url = "admin/structure/block/manage/hasta_cms/gmap/configure"][/block]<br/>';
  $output[] = '<strong>admin_url</strong> - URL of the block edit page.</p>';
  return implode(' ', $output);
}

function hasta_shortcodes_shortcode_block_settings($attrs, $text) {
  module_load_include('inc', 'block', 'block.admin');
  $current_theme = variable_get('theme_default', 'none');
  $blocks = block_admin_display_prepare_blocks($current_theme);
  usort($blocks, '_sort_blocks');
  $options = array();
  foreach ($blocks as $block) {
    $options['admin/structure/block/manage/' . $block['module']  .'/' . $block['delta'] . '/configure'] = check_plain($block['info']);
  }
  asort($options);
  $form['admin_url'] = array(
    '#title' => t('Block'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($attrs['admin_url']) ? $attrs['admin_url'] : '',
    '#attributes' => array('class' => array('form-control'))
  );
  return $form;
}

function hasta_shortcodes_shortcode_block_description($attrs, $text) {
  if (strpos($attrs['admin_url'], 'admin/structure/block') !== FALSE) {
    $form = hasta_shortcodes_shortcode_block_settings($attrs, $text);
    $value = l($form['admin_url']['#options'][$attrs['admin_url']], $attrs['admin_url'], array('attributes' => array('target' => '_blank')));
    return $value;
  }
}

function hasta_shortcodes_shortcode_node($attrs, $text) {
  if (isset($attrs['admin_url']) && strpos($attrs['admin_url'], 'node/') !== FALSE) {
    $node_name = substr($attrs['admin_url'], strpos($attrs['admin_url'], 'node/') + 5);
    $parts = explode('/', $node_name);
    $node = node_load($parts[0]);
    if (isset($node->nid) && $node->nid) {
      $node = node_view($node);
      $output = render($node);
      $attrs = _hasta_shortcodes_shortcode_attributes($attrs);
      $text = $attrs ? '<div ' . $attrs  . '>' . $output . '</div>' : $output;
      return $text;
    }
  }
}

function hasta_shortcodes_shortcode_node_tip($format, $long) {
  $output = array();
  $output[] = '<p><strong>Node:</strong><br/>[node admin_url = "node/1/edit"][/node]<br/>';
  $output[] = '<strong>admin_url</strong> - URL of the node edit page.</p>';
  return implode(' ', $output);
}

function hasta_shortcodes_shortcode_node_description($attrs, $text) {
  if (strpos($attrs['admin_url'], 'node/') !== FALSE) {
    $node_name = substr($attrs['admin_url'], strpos($attrs['admin_url'], 'node/') + 5);
    $parts = explode('/', $node_name);
    $nid = $parts[0];
    if (is_numeric($nid)) {
      $node = node_load($nid);
      return l($node->title, 'node/' . $nid . '/edit', array('attributes' => array('target' => '_blank')));
    }
  }
}

function hasta_shortcodes_shortcode_node_settings($attrs, $text) {
  $form['admin_url'] = array(
    '#title' => t('Node Title'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'admin/ajax/nd_visualshortcodes/node_autocomplete',
    '#default_value' => isset($attrs['admin_url']) ? $attrs['admin_url'] : '',
    '#attributes' => array('class' => array('form-control'))
  );
  return $form;
}

function hasta_shortcodes_shortcode_container($attrs, $text) {
  $attrs['class'] = 'container ' . (isset($attrs['class']) ? $attrs['class'] : '');
  $text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) .'>' . $text . '</div>';
  return $text;
}

function hasta_shortcodes_shortcode_container_tip($format, $long) {
  $output = array();
  $output[] = '<p><strong>Responsive container:</strong><br/>[container]Content[/container]<br/>';
  $output[] = 'Use this for non-full width content.</p>';
  $output[] = '<p><strong>Responsive columns:</strong><br/>[row]<br/>[col phone = 12 tablet = 12 desktop = 6 wide = 6]Content with date[/col][/row]<br/>';
  $output[] = 'Describe how many rows will take col in different devices: phone, tablet, desktop, wide. From 1 to 12 rows.</p>';
  return implode(' ', $output);
}

function hasta_shortcodes_shortcode_div($attrs, $text) {
  $attrs['class'] = isset($attrs['vertical_align']) && $attrs['vertical_align'] ? 'vertical-align ': '';
  $text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) .'>' . $text . '</div>';
  if (isset($attrs['vertical_align']) && $attrs['vertical_align'] ) {
    //$text = '<div class = "home-content">' . $text . '</div>';
  }
  return $text;
}

function hasta_shortcodes_shortcode_div_settings($attrs, $text) {
  $form['vertical_align'] = array(
    '#title' => t('Vertical Align'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['vertical_align']) ? $attrs['vertical_align'] : FALSE,
  );
  return $form;
}

function hasta_shortcodes_shortcode_row($attrs, $text) {
  $attrs['class'] = 'row ' . (isset($attrs['class']) ? $attrs['class'] : '');
  $no_gutter = isset($attrs['no_gutter']) && $attrs['no_gutter'] ? ' no-gutter' : '';
  $attrs['class'] .= $no_gutter;
  $text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) .'>' . $text . '</div>';
  return $text;
}

function hasta_shortcodes_shortcode_row_settings($attrs, $text) {
  $form['no_gutter'] = array(
    '#type' => 'checkbox',
    '#title' => t('No Columns Padding'),
    '#default_value' => isset($attrs['no_gutter']) ? $attrs['no_gutter'] : FALSE, 
  );
  return $form;
}

function hasta_shortcodes_shortcode_col($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  if (isset($attrs['phone'])) {
    $attrs['class'] .= ' col-xs-' . $attrs['phone'];
  }
  if (isset($attrs['tablet'])) {
    $attrs['class'] .= ' col-sm-' . $attrs['tablet'];
  }
  if (isset($attrs['desktop'])) {
    $attrs['class'] .= ' col-md-' . $attrs['desktop'];
  }
  if (isset($attrs['wide'])) {
    $attrs['class'] .= ' col-lg-' . $attrs['wide'];
  }
  $text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</div>';
  return $text;
}

function hasta_shortcodes_shortcode_html($attrs, $text) {
  $attrs['class'] = (isset($attrs['class']) ? $attrs['class'] : '') . (isset($attrs['p_classes']) && $attrs['p_classes'] ? ' ' . $attrs['p_classes'] : '');
  // Made a little hack for tables which can't be controled because rendered some WYSIWYG editor, and also list styles
  //$text = str_replace(array('<table', '<ul>', '<ol>'), array('<table class = "table table-bordered table-striped"', '<ul class = "iconlist dark">', '<ol class = "list">'), $text);
  $attrs_output = _hasta_shortcodes_shortcode_attributes($attrs);
  if ($attrs_output) {
    return '<div ' . $attrs_output . '>' . $text . '</div>';
  }
  return $text;
}

function hasta_shortcodes_shortcode_html_settings($attrs, $text) {
  $form = nd_visualshortcodes_shortcode_html_settings($attrs, $text);
  $classes = array('' => t('None'), 'alt-features-descr' => t('15px gray'), 'text' => t('16px dark gray'), 'banner-decription' => t('16px silver'),
    'section-text' => t('18px gray'), 'lead' => t('24px Lead'));
  $form['p_classes'] = array(
    '#type' => 'select',
    '#title' => t('Text Options'),
    '#options' => $classes,
    '#default_value' => isset($attrs['p_classes']) ? $attrs['p_classes'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hasta_shortcodes_shortcode_header($attrs, $text) {
  $title = isset($attrs['title']) ? $attrs['title'] : drupal_get_title();
  $output = '<section ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' .    
      '<div class="pagenation-holder">
        <div class="container">
          <div class="row">
            <div class="col-md-6">
              <h3>' . $title . '</h3>
            </div>
            ' . (isset($attrs['breadcrumbs']) && $attrs['breadcrumbs'] ? '
              <div class="col-md-6 text-right">
                ' . theme('breadcrumb', array('breadcrumb' => drupal_get_breadcrumb())) . '
              </div>
            ' : '') . '
          </div>
        </div>
      </div>
    </section>
    <div class="clearfix"></div>';
  return $output;
}

function hasta_shortcodes_shortcode_header_settings($attrs, $text) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Override title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-9">',
  );
  $form['breadcrumbs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Breadcrumbs'),
    '#default_value' => isset($attrs['breadcrumbs']) ? $attrs['breadcrumbs'] : TRUE,
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hasta_shortcodes_shortcode_header_top($attrs, $text) {
  global $user;
  $attrs['class'] = (isset($attrs['class']) ? $attrs['class'] . ' ' : '') . 'topbar';
  $attrs['class'] .= isset($attrs['type']) && $attrs['type'] == 3 ? '' : ' topbar-padding';
  $attrs['class'] .= (isset($attrs['bg_color']) ? ' ' . $attrs['bg_color'] : ' white');
  $attrs['type'] = isset($attrs['type']) ? $attrs['type'] : 0;
  $attrs['phone_icon'] = isset($attrs['phone_icon']) && isset($attrs['text_right']) ? '<i class="fa fa-phone"></i> &nbsp;' : '';
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $logo = isset($file->uri) ? file_create_url($file->uri) : theme_get_setting('logo');

  $text = trim($text);
  $inner = '';
  switch($attrs['type']) {
    case 3:
      $login = '';
      if(isset($attrs['login']) && $attrs['login']) {
        $login = $user->uid ? l(t('My Account'), 'user') : l(t('User'), 'user/login');
      }
      $register = '';
      if(isset($attrs['register']) && $attrs['register'] && !$user->uid) {
        $register = '<li class="' . ($text ? 'lineright' : ''). '">' . l(t('Register'), 'user/register') . '</li>';
      }
      $inner = '<div class="topbar-left-items"><div class="margin-top1"></div>
        <ul class="toplist toppadding pull-left paddtop1">
          ' . (isset($attrs['text_left']) ? '<li class="rightl">' . $attrs['text_left'] . '</li>': '') . '
          ' . (isset($attrs['text_right']) ? '<li>' . $attrs['text_right'] . '</li>': '') . '
        </ul>
      </div>
      <div class="topbar-middle-logo"><a href="' . url('<front>') . '"><img src = "' . file_create_url($logo) . '"></a></div>
      <div class="topbar-right-items pull-right"><div class="margin-top1"></div>
        <ul class="toplist toppadding">
          <li class="' . ($register || $text ? 'lineright' : ''). '">' . $login . '</li>'
           . $register .
          ($text  ? '<li>' . $text . '</li>' : '') .'
        </ul>
      </div>';
      break;
    case 2:
      $login = '';
      if(isset($attrs['login']) && $attrs['login']) {
        $attributes = array('attributes' => array('class' => array('topbar-btn')));
        $login = $user->uid ? l(t('My Account'), 'user', $attributes) : l(t('Login'), 'user/login', $attributes);
      }
      $register = '';
      if(isset($attrs['register']) && $attrs['register'] && !$user->uid) {
        $attributes = array('attributes' => array('class' => array('topbar-btn active')));
        $register = l(t('Register'), 'user/register', $attributes);
      }
      $inner = '<a href="' . url('<front>') . '" class="logo two toppadd">' . theme('image', array('path' => $logo)) . '</a>
      <ul class="toplist toppadding">
          ' . (isset($attrs['text_left']) ? '<li>' . $attrs['text_left'] . '</li>': '') . '
        ' . (isset($attrs['text_right']) ? '<li class="' . ($register || $login || $text ? 'lineright' : ''). '">' . $attrs['phone_icon'] . $attrs['text_right'] . '</li>' : '')
         . ($login ? '<li class="' . ($register || $text ? 'lineright' : ''). '>' . $login . '</li>' : '')
         . ($register ? '<li class="' . ($text ? 'lineright' : ''). '>' . $register . '</li>' : '') .
         ($text  ? '<li>' . $text . '</li>' : '') . '
      </ul>';
      break;
    case 1:
      $login = '';
      if(isset($attrs['login']) && $attrs['login']) {
        $attributes = array('attributes' => array('class' => array('topbar-btn')));
        $login = $user->uid ? l(t('My Account'), 'user', $attributes) : l(t('Login'), 'user/login', $attributes);
      }
      $register = '';
      if(isset($attrs['register']) && $attrs['register'] && !$user->uid) {
        $attributes = array('attributes' => array('class' => array('topbar-btn active')));
        $register = l(t('Register'), 'user/register', $attributes);
      }
      $inner = '<a href="' . url('<front>') . '" class="logo two toppadd">' . theme('image', array('path' => $logo)) . '</a>
      <ul class="toplist toppadding">
        ' . (isset($attrs['text_right']) ? '<li>' . $attrs['phone_icon'] . $attrs['text_right'] . '</li>' : '')
         . ($login ? '<li>' . $login . '</li>' : '')
         . ($register ? '<li>' . $register . '</li>' : '') .
         ($text  ? '<li>' . $text . '</li>' : '') . '
      </ul>';
      break;
    default:
      $login = '';
      if(isset($attrs['login']) && $attrs['login']) {
        $login = $user->uid ? l(t('My Account'), 'user') : l(t('User'), 'user/login');
      }
      $register = '';
      if(isset($attrs['register']) && $attrs['register'] && !$user->uid) {
        $register = '<li class="' . ($text ? 'lineright' : ''). '">' . l(t('Register'), 'user/register') . '</li>';
      }
      $inner = '<div class="topbar-left-items">
        <ul class="toplist toppadding pull-left paddtop1">
          ' . (isset($attrs['text_left']) ? '<li class="rightl">' . $attrs['text_left'] . '</li>': '') . '
          ' . (isset($attrs['text_right']) ? '<li>' . $attrs['text_right'] . '</li>': '') . '
        </ul>
      </div>
      <div class="topbar-right-items pull-right">
        <ul class="toplist toppadding">
          <li class="' . ($register || $text ? 'lineright' : ''). '">' . $login . '</li>'
           . $register .
          ($text  ? '<li>' . $text . '</li>' : '') .'
        </ul>
      </div>';
  }
  $output = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' .    
    '<div class="container">
    ' . $inner . '
    </div>
  </div>
  <div class="clearfix"></div>';
  return $output;
}

function hasta_shortcodes_shortcode_header_top_settings($attrs, $text) {
  $types = array(t('No Logo'), t('Logo at left'), t('Logo at Left 2'), t('Logo Centered'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Header Type'),
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '',
    '#options' => $types,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $filename = isset($file->uri) ? $file->uri : '';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
    '#states' => array (
      'visible' => array(
        'select[name="type"]' => array('!value' => 0),
      ),
    )
  );
  $form['text_left'] = array(
    '#type' => 'textfield',
    '#title' => t('Info Text'),
    '#default_value' => isset($attrs['text_left']) ? $attrs['text_left'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $form['text_right'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone Text'),
    '#default_value' => isset($attrs['text_right']) ? $attrs['text_right'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
  );
  $form['phone_icon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Phone Icon'),
    '#default_value' => isset($attrs['phone_icon']) ? $attrs['phone_icon'] : FALSE,
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
    '#states' => $states,
  );
  $form['login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Login Link'),
    '#default_value' => isset($attrs['login']) ? $attrs['login'] : TRUE,
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['register'] = array(
    '#type' => 'checkbox',
    '#title' => t('Register link'),
    '#default_value' => isset($attrs['register']) ? $attrs['register'] : TRUE,
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $colors = array('white' => t('White'), 'light' => t('Gray'), 'orange2' => t('Colored'));
  $form['bg_color'] = array(
    '#type' => 'select',
    '#title' => t('Background Color'),
    '#options' => $colors,
    '#default_value' => isset($attrs['bg_color']) ? $attrs['bg_color'] : 'white',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hasta_shortcodes_shortcode_button($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  switch ($attrs['btn_width']) {
    case '1':
      $attrs['class'] .= isset($attrs['button_type']) && $attrs['button_type'] == 'border' ? ('sh-btn sh-btn-border ' . $attrs['color'] . ' sh-btn-' . $attrs['size']) : ('sh-btn sh-btn-' . $attrs['color'] . ' sh-btn-' . $attrs['size']);
      if (isset($attrs['display']) && $attrs['display'] == 'xround') {
      $attrs['class'] .= isset($attrs['size']) && $attrs['size'] == 'large' ? ' sh-btn-' . $attrs['display'] . '-7 margin' : ' sh-btn-' . $attrs['display'] . '-4 margin';
      }
      else {
        $attrs['class'] .= ' sh-btn-' . $attrs['display'] . ' margin';
      }
      break;
    default:
      $btn_type = isset($attrs['button_type']) ? $attrs['button_type'] : '';
      if ($attrs['color'] == 'orange') {
        $attrs['color'] .= '-2';
      }
      if ($attrs['color'] == 'green') {
        $attrs['color'] .= '-4';
      }
      if ($attrs['color'] == 'pink' && $btn_type == '') {
        $attrs['color'] .= '-3';
      }
      if ($attrs['color'] == 'yellow' && $btn_type == 'border') {
        $attrs['color'] = 'yellow-2';
      }
      if ($attrs['color'] == 'yellow' && $btn_type == '') {
        $attrs['color'] = 'yellow-3';
      }
      if ($btn_type == 'border' && $attrs['color'] == 'white') {
        $attrs['color'] = 'light';
      }
      $attrs['class'] .= isset($attrs['button_type']) && $attrs['button_type'] == 'border' ? 'btn btn-border ' . $attrs['color'] . ' btn-' . $attrs['display'] . ' btn-' . $attrs['size'] : 'btn btn-' . $attrs['color'] . ' btn-' . $attrs['display'] . ' btn-' . $attrs['size'];
      break;
  }
  $attrs['link'] = isset($attrs['link']) ? $attrs['link'] : '#';
  $attrs['href'] = strpos($attrs['link'], '#') === FALSE ? url($attrs['link']) : $attrs['link'];
  $text = isset($attrs['text']) ? $attrs['text']: '';
  $text = '<a ' . _hasta_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '</a>';
  return $text;
}

function hasta_shortcodes_shortcode_button_settings($attrs, $text) {
  $btn_widths = array('1' => t('Shorter'), '2' => t('Longer'));
  $form['btn_width'] = array(
    '#type' => 'select',
    '#title' => t('Width'),
    '#options' => $btn_widths,
    '#default_value' => isset($attrs['btn_width']) ? $attrs['btn_width'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $button_types = array('' => t('Filled'), 'border' => t('Bordered'));
  $form['button_type'] = array(
    '#type' => 'select',
    '#title' => t('Button type'),
    '#options' => $button_types,
    '#default_value' => isset($attrs['button_type']) ? $attrs['button_type'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $sizes = array('small' => t('Small'), 'medium' => t('Medium'), 'large' => t('Large'));
  $form['size'] = array(
    '#type' => 'select',
    '#title' => t('Size'),
    '#options' => $sizes,
    '#default_value' => isset($attrs['size']) ? $attrs['size'] : 'small',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-2">',
  );
  $colors = array ('orange' => t('Orange'), 'red' => t('Red'), 'green' => t('Green'), 'blue' => t('Blue'), 'yellow' => t('Yellow'), 'pink' => t('Pink'), 'dark' => t('Dark'), 'white' => t('Light'));
  $form['color'] = array(
    '#title' => t('Button color'),
    '#type' => 'select',
    '#options' => $colors,
    '#default_value' => isset($attrs['color']) ? $attrs['color'] : 'orange',
    '#attributes' => array ('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-2">',
  );
  $displays = array('round' => t('Round'), 'xround' => t('Circle'));
  $form['display'] = array(
    '#type' => 'select',
    '#title' => t('Display'),
    '#options' => $displays,
    '#default_value' => isset($attrs['display']) ? $attrs['display'] : 'round',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-2">',
  );
  $form['text'] = array(
    '#title' => t('Text'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['text']) ? $attrs['text'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#size' => 80,
    '#maxlength' => 250, 
    '#prefix' => '</div></div><div class = "row"><div class = "col-sm-6">',
  );
  $form['link'] = array(
    '#type' => 'textfield',
    '#title' => t('Link'),
    '#default_value' => isset($attrs['link']) ? $attrs['link'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
  );
  return $form;
}

function hasta_shortcodes_shortcode_accordions($attrs, $text) {
  $attrs['class'] = (isset($attrs['class']) ? $attrs['class'] : '');
  $attrs['class'] .= 'accordion_holder ';
  if (isset($attrs['title_style'])) { 
    $text = str_replace('accordion_in', 'accordion_in ' . $attrs['title_style'], $text); 
  }
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    <div class="accordion_example1">
      ' . $text . '
    </div>
  </div>';
  return $text;
}

function hasta_shortcodes_shortcode_accordions_settings($attrs, $text) {
  $title_styles = array('' => t('Non-colored bg, Circle icon'), 'two' => t('Non-colored bg'), 'five' => t('Non-colored bg, Colored active'), 'four' => t('Non-colored bg, Colored active, Circle'), 'three' => t('Dark bg'));
  $form['title_style'] = array(
  	'#type' => 'select',
  	'#title' => t('Title style'),
  	'#options' => $title_styles, 
  	'#default_value' => isset($attrs['title_style']) ? $attrs['title_style'] : '',
  	'#attributes' => array('class' => array('form-control')),
  );
  return $form;
}

function hasta_shortcodes_shortcode_accordion($attrs, $text) {
  $attrs['class'] = (isset($attrs['class']) ? $attrs['class'] : '');
  $attrs['class'] .=  'accordion_in ';
  if (isset($attrs['active']) && $attrs['active']) { 
    $attrs['class'] .= ' acc_active';
  }
  $text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    <div class="acc_head">' . $attrs['title'] . '</div>
    <div class="acc_content">
      ' . $text . '
    </div>
  </div>';
  return $text;
}

function hasta_shortcodes_shortcode_accordion_settings($attrs, $text) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-sm-12">',
  );
  $form['active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#default_value' => isset($attrs['active']) ? $attrs['active'] : FALSE,
    '#prefix' => '</div></div><br/><div class="row"><div class="col-sm-6">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hasta_shortcodes_shortcode_message_boxes($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  switch ($attrs['mb_type']) {
    case 'succes':
      $mb_icon = 'fa fa-thumbs-o-up';
      $mb_name = 'Success';
      break;
    case 'error':
      $mb_icon = 'fa fa-exclamation-triangle';
      $mb_name = "Error";
      break;
    case 'warning':
      $mb_icon = 'fa fa-exclamation';
      $mb_name = 'Warning';
      break;
    default:
      $mb_icon = 'fa fa-info';
      $mb_name = 'Info';
      break;
  }
  $attrs['class'] .= isset($attrs['mb_type']) ? $attrs['mb_type'] : '';
  $attrs['class'] .= '-box alert text-white';
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    <span>
      <i class="' . $mb_icon . ' text-white"></i> &nbsp; &nbsp;' . $mb_name . ' - ' . $attrs['message'] . '
    </span>
    <a class="mboxes_close" href="#"><i class="fa fa-times"></i></a>
  </div>';
  return $text;
}

function hasta_shortcodes_shortcode_message_boxes_settings($attrs, $text) {
  $mb_types = array('success' => t('Success'), 'warning' => t('Warning'), 'error' => t('Error'), 'info' => t('Info'));
  $form['mb_type'] = array(
  	'#type' => 'select',
  	'#title' => t('Box type'),
  	'#options' => $mb_types,
  	'#default_value' => isset($attrs['mb_type']) ? $attrs['mb_type'] : 'succes',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-sm-6">',
  );
  $form['message'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Message'),
  	'#default_value' => isset($attrs['message']) ? $attrs['message'] : '',
  	'#attributes' => array('class' => array('form-control')),
  	'#prefix' => '</div></div><div class="row"><div class="col-sm-12">',
  	'#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_image_hovers($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= 'img-hover-holder-';
  $attrs['class'] .= isset($attrs['hov_style']) ? $attrs['hov_style'] : '';
  $attrs['class'] .= ' bmargin';
  $class = 'img-hover-';
  $class .= isset($attrs['hov_style']) ? $attrs['hov_style'] : '';
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $uri = isset($file->uri) ? $file->uri : '';
  if (!$uri) {
    return '';
  }
  $attributes = array('class' => array('img-responsive'));
  $img = isset($attrs['image_style']) && $attrs['image_style'] ? (theme('image_style', array('style_name' => $attrs['image_style'], 'title' => '', 'path' => $uri, 'attributes' => $attributes))) : (theme('image', array('title' => '', 'path' => $uri, 'attributes' => $attributes)));
  switch ($attrs['hov_style']) {
  	case '2' :
      $attrs['link2'] = isset($attrs['link2']) ? url($attrs['link2']) : '#';
  	 	$text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <div class="' . $class . '">
          <div class="text-box">
            <a class="icon-1 cbp-lightbox" href="' . file_create_url($uri) . '"><i class="fa fa-search"></i></a> <a class="icon-1 two" href="' . $attrs['link2'] . '"><i class="fa fa-link"></i></a>
          </div>
          ' . $img . '
        </div>
      </div>';
  	 	break;
  	case '4' :
  		$text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <div class="' . $class . '">
          <div class="text-box">
            <h5 class="text-white">' . $attrs['title'] . '</h5>
            <p class="text-white">' . $attrs['text'] . '</p>
          </div>
          ' . $img . '
        </div>
      </div>';
  		break;
  	default :
  		$text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <div class="' . $class . '">
          <div class="text-box">
            <h4 class="text-white">' . $attrs['title'] . '</h4>
            <p class="text-white">' . $attrs['text'] . '</p>
          </div>
          ' . $img . '
          </div>
      </div>';
  		break;
  }
  return $text;
}

function hasta_shortcodes_shortcode_image_hovers_settings($attrs, $text) {
  $states =  array(
    'visible' => array('select[name="hov_style"]' => array('value' => '2')),
  );
  $states1 =  array(
    'invisible' => array('select[name="hov_style"]' => array('value' => '2')),
  ); 
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Image'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class = "row">',
  );
  $styles = array('' => t(' - Original - '));
  foreach(image_styles() as $name => $style) {
    $styles[$name] = $style['label'];
  }
  $form['image_style'] = array(
    '#type' => 'select',
    '#title' => t('Image Style'),
    '#options' => $styles,
    '#default_value' => isset($attrs['image_style']) ? $attrs['image_style'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="row"><div class = "col-sm-6">',
  );
  $img_hover_styles = array('1' => 'Colored, Top to Bottom', '2' => 'Icon links', '3' => 'Transparent, Left to Right', '4' => 'Visible title, Bottom to Top');
  $form['hov_style'] = array(
  	'#type' => 'select',
  	'#title' => t('Hover style'),
  	'#options' => $img_hover_styles,
  	'#default_value' => isset($attrs['hov_style']) ? $attrs['hov_style'] : '1',
  	'#attributes' => array('class' => array('form-control')),
  	'#prefix' => '</div><div class="col-sm-6">',
    '#suffix' => '</div></div>',
  );
  $form['title'] = array(
  	'#type'  => 'textfield',
  	'#title' => t('Title'),
  	'#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
  	'#attributes' => array('class' => array('form-control')),
  	'#prefix' => '<div class="row"><div class = "col-sm-12">',
  	'#suffix' => '</div></div>',
    '#states' => $states1,
  );
  $form['link2'] = array(
  	'#type' => 'textfield',
  	'#title' => '<div class="fa fa-link">' . t(' Link') . '</div>',
  	'#default_value' => isset($attrs['link2']) ? $attrs['link2'] : '',
  	'#attributes' => array('class' => array('form-control')),
  	'#prefix' => '<div class="row"><div class="col-sm-12">',
    '#states' => $states, 
    '#suffix' => '</div></div>',
  );
  $form['text'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Text'),
  	'#default_value' => isset($attrs['text']) ? $attrs['text'] : '',
  	'#attributes' => array('class' => array('form-control')),
 	  '#states' => $states1, 
  );
  return $form;
}

function hasta_shortcodes_shortcode_slider($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] = 'carousel_holder ';
  $class = 'owl-carousel';
  if (isset($attrs['sl_style']) && $attrs['sl_style'] == 'sync') {
    $text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
      <div id="' . $attrs['sl_style'] . '1" class="' . $class . '">' . $text . '</div>
        <div class="col-md-8 col-sm-12 col-xs-12">
          <div id="' . $attrs['sl_style'] . '2" class="owl-carousel">' . str_replace('img style=""', 'img style="width: 120px; height:50px;"', $text) . '</div>
        </div>
      </div>
    </div>';
  } 
  else { 
    $text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
      <div id="' . $attrs['sl_style'] . '" class="' . $class .'">' . $text . '</div>
    </div>';
  }
  return $text;
}

function hasta_shortcodes_shortcode_slider_settings($attrs, $text) {
  $sl_style = array ('owl-demo5' => t('4 images in row'), 'owl-demo6' => t('Auto height'), 'owl-demo7' => t('Dot only navigation'), 'owl-demo8' => t('Custom slide'), 'sync' => t('Synced owls'));
  $form['sl_style'] = array(
  	'#type' => 'select',
  	'#title' => t('Slider style'),
  	'#options' => $sl_style,
  	'#default_value' => isset($attrs['sl_style']) ? $attrs['sl_style'] : 'owl-demo5',
  	'#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-8">'
  );
  return $form;
}

function hasta_shortcodes_shortcode_slider_item($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= 'item';
  return '<div' . _hasta_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '</div>';
}

function hasta_shortcodes_shortcode_image($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $uri = isset($file->uri) ? $file->uri : '';
  if (!$uri) {
    return '';
  }
  if (isset($attrs['link']) && $attrs['link'] == '#') {
  	$link = '<a href="#">';
  	$end_link = '</a>';
  }
  elseif (!isset($attrs['link'])) {
  	$link = '';
  	$end_link = '';
  }
  else {
  	$link = '<a href="' . $attrs['link'] . '">';
  	$end_link = '</a>';
  }
  $attributes = array('style' => '');
  $img = isset($attrs['image_style']) && $attrs['image_style'] ? (theme('image_style', array('style_name' => $attrs['image_style'], 'title' => '', 'path' => $uri, 'attributes' => $attributes))) : (theme('image', array('title' => '', 'path' => $uri, 'attributes' => $attributes)));
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $link . $img . $end_link . '</div>';
  return $text;
}

function hasta_shortcodes_shortcode_image_settings($attrs, $text) {
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Image'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class = "row"><div class = "col-sm-12">',
  );
  $styles = array('' => t(' - Original - '));
  foreach(image_styles() as $name => $style) {
    $styles[$name] = $style['label'];
  }
  $form['image_style'] = array(
    '#type' => 'select',
    '#title' => t('Image Style'),
    '#options' => $styles,
    '#default_value' => isset($attrs['image_style']) ? $attrs['image_style'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class = "col-sm-6">',
  );
  $form['link'] = array(
    '#title' => t('Link'),
    '#description' => t('Leave empty or Use #/Link'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['link']) ? $attrs['link'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-6">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_divider($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['color2'] = isset($attrs['color2']) ? $attrs['color2'] : '';
  switch ($attrs['type']) {
    case 'title-line-4':
      $attrs['class'] .= $attrs['type'] . ' ' . $attrs['color2'] . ' align-' . $attrs['d_align'];
      break;
    
    default:
      $attrs['class'] .= 'sh-divider-line ';
      $attrs['class'] .= $attrs['type'];
      $attrs['class'] .= ' less-width-';
      $attrs['class'] .= $attrs['size'];
      $attrs['class'] .= ' ' . $attrs['color'];
      $attrs['class'] .= ' margin';
      break;
  }
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '></div>';
  return $text;
}

function hasta_shortcodes_shortcode_divider_settings($attrs, $text) {
  $d_styles = array('solid' => t('Solid'), 'dashed' => t('Dashed'), 'doubble' => t('Doubble'), 'title-line-4' => t('Title line'));
  $form['type'] = array(
  	'#title' => t('Style'),
  	'#type' => 'select',
  	'#options' => $d_styles,
  	'#default_value' => isset($attrs['type']) ? $attrs['type'] : 'solid',
  	'#attributes' => array('class' => array('form-control')),
  	'#prefix' => '<div class="row"><div class="col-sm-4">',
  );
  $states = array(
    'visible' => array('select[name="type"' => array('!value' => 'title-line-4'))
  );
  $d_color = array('dark' => t('Dark'), 'light' => t('Light'), 'red' => t('Red'), 'green' => t('Green'), 'blue' => t('Blue'));
  $form['color'] = array(
  	'#type' => 'select',
  	'#title' => t('Color'),
  	'#options' => $d_color,
  	'#default_value' => isset($attrs['color']) ? $attrs['color'] : 'dark',
  	'#attributes' => array('class' => array('form-control')),
  	'#prefix' => '</div><div class="col-sm-4">',
    '#states' => $states
  );
  $d_sizes = array('1' => t('1'), '2' => t('2'), '3' => t('3'), '4' => t('4'), '5' => t('5'), '6' => t('6'), '7' => t('7'), '8' => t('8'), '9' => t('9'), '10' => t('10') );
  $form['size'] = array(
  	'#type' => 'select',
  	'#title' => t('Size'),
  	'#options' => $d_sizes,
  	'#default_value' => isset($attrs['size']) ? $attrs['size'] : '10',
  	'#attributes' => array('class' => array('form-control')),
  	'#prefix' => '</div><div class="col-sm-4">',
  	'#suffix' => '</div></div>',
    '#states' => $states,
  );
  $states1 = array(
    'invisible' => array('select[name="type"' => array('!value' => 'title-line-4'))
  );
  $d_color2 = array('' => t('Dark'), 'white' => t('Light'), 'pink' => t('Pink'), 'green' => t('Green'), 'blue' => t('Blue'));
  $form['color2'] = array(
    '#type' => 'select',
    '#title' => t('Size'),
    '#options' => $d_color2,
    '#default_value' => isset($attrs['color2']) ? $attrs['color2'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-sm-4">',
    '#states' => $states1,
  );
  $d_align = array('center' => t('Center'), 'left' => t('Left'), 'right' => t('Right'));
  $form['d_align'] = array(
    '#type' => 'select',
    '#title' => t('Size'),
    '#options' => $d_align,
    '#default_value' => isset($attrs['d_align']) ? $attrs['d_align'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-4">',
    '#suffix' => '</div></div>',
    '#states' => $states1,
  );
  return $form;
}

function hasta_shortcodes_shortcode_social_icons_container($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= $attrs['type'] == '1' ? 'social-icons-list ' : (isset($attrs['color2']) && $attrs['color2'] == 'toplist' ? '' : 'social-icons-3   ');
  if ($attrs['type'] == '2' && isset($attrs['color2']) && $attrs['color2'] != 'socialicon-holder') {
    $attrs['class'] .= isset($attrs['color2']) ? $attrs['color2'] : '';
    $text = '<ul' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</ul>';
  }
  elseif ($attrs['type'] == '2' && isset($attrs['color2']) && $attrs['color2'] == 'socialicon-holder') {
    $attrs['class'] .= 'socialicon-holder';
    $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
      <ul class=" social-icons-3">
      ' . $text . '
      </ul>
    </div>';
  }
  elseif ($attrs['type'] == '2') {
    $text = '<ul' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</ul>';
  }
  else {
    $attrs['class'] .= isset($attrs['color']) ? $attrs['color'] : '';
    $attrs['class'] .= isset($attrs['size']) ? ' icon-' . $attrs['size'] : '';
    $attrs['class'] .= isset($attrs['ic_style']) ? $attrs['ic_style'] : '';
    $text = '<ul' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</ul>';
  }
  return $text;
}

function hasta_shortcodes_shortcode_social_icons_container_settings($attrs, $text) {
  $i_size = array('large' => t('Large'), 'medium' => t('Medium'), 'small' => t('Small'), 'tiny' => t('Tiny'));
  $i_color = array('dark' => t('Dark'), 'light' => t('Light'), 'red' => t('Red'), 'blue' => t('Blue'), 'yellow' => t('Yellow'), 'green' => t('Green'), 'pink' => t('Pink'), 'violet' => t('Violet'));
  $i_style = array('' => t('Square'), ' icon-round' => t('Round'));
  $i_type = array('1' => t('Standart'), '2' => t('Minimal'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $i_type,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-sm-3">',
  );
  $states = array(
    'visible' => array('select[name="type"]' => array('value' => '2')),
  );
  $states1 = array(
    'invisible' => array('select[name="type"]' => array('value' => '2')),
  );
  $form['size'] = array(
    '#type' => 'select',
    '#title' => t('Size'),
    '#options' => $i_size,
    '#default_value' => isset($attrs['size']) ? $attrs['size'] : 'large',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-3">',
    '#states' => $states1,
  );
  $form['color'] = array(
    '#type' => 'select',
    '#title' => t('Color'),
    '#options' => $i_color,
    '#default_value' => isset($attrs['color']) ? $attrs['color'] : 'dark',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-3">',
    '#states' => $states1,
  );
  $form['ic_style'] = array(
    '#type' => 'select',
    '#title' => t('Form'),
    '#options' => $i_style,
    '#default_value' => isset($attrs['ic_style']) ? $attrs['ic_style'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-3">',
    '#states' => $states1,
  );
  $i_color2 = array('' => t('Light, Round'), 'dark-2' => t('Dark, Round, Light Hover'), 'dark' => t('Dark, Round, Yellow Hover'), 'blue' => t('Light, Square, Blue Hover'), 'violet' => t('Light, Round, Violet Hover'), 'toplist' => t('No Background'));
  $form['color2'] = array(
    '#type' => 'select',
    '#title' => t('Color'),
    '#options' => $i_color2,
    '#default_value' => isset($attrs['color2']) ? $attrs['color2'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class="col-sm-3">',
    '#suffix' => '</div></div>',
    '#states' => $states,
  );
  return $form;
} 

function hasta_shortcodes_shortcode_social_icon($attrs, $text) {
  $class = isset($attrs['icon']) ? $attrs['icon'] : '';
  $link = isset($attrs['link']) ? url($attrs['link']) : '#';
  $text = '<li' . _hasta_shortcodes_shortcode_attributes($attrs) . '><a href="' . $link . '"><i class = "' . $class . '"></i></a></li>';
  return $text;
}

function hasta_shortcodes_shortcode_social_icon_settings($attrs, $text) {
  $form['icon'] = array(
    '#title' => t('Icon'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'admin/ajax/nd_visualshortcodes/icons_autocomplete/font_awesome',
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $form['link'] = array(
    '#title' => t('Link'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['link']) ? $attrs['link'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-6">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_call_to_action($attrs, $text) {
  $attrs['class'] = 'call-to-action';
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</div>';
  return $text;
}

function hasta_shortcodes_shortcode_list_style_item($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= 'list-style-' . $attrs['li_style'];
  if (isset($attrs['li_border']) && $attrs['li_style'] == '1' && $attrs['li_border'] == 'border') { 
    $attrs['class'] .= ' icon-' . $attrs['li_border']; 
  }
  if ($attrs['li_style'] == '1') { 
    $icon = $attrs['icon']; $color = ''; 
  }
  if ($attrs['li_style'] == '2') { 
    $icon = 'fa fa-angle-right'; $color = ''; 
  }
  if (isset($attrs['li_border']) && $attrs['li_style'] == '4' && $attrs['li_border'] == 'border') { 
    $attrs['class'] .= ' item-' . $attrs['li_border']; 
  }
  if ($attrs['li_style'] == '4') { 
    $icon = $attrs['icon']; $color = $attrs['color']; 
  }
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    <div class="icon ' . $color . '"><i class="' . $icon . '"></i></div>
      <div class="text">' . $attrs['text'] . '</div>
  </div>';
  return $text;
}

function hasta_shortcodes_shortcode_list_style_item_settings($attrs, $text) {
  $li_styles = array('1' => t('Light Blue icon'), '2' => t('Angle right'), '4' => t('Colored icon'));
  $li_colors = array('red' => t('Red'), 'blue' => t('Blue'), 'green' => t('Green'), 'orange' => t('Orange'), 'violet' => t('Violet'));
  $borders = array('' => t('Non-bordered'), 'border' => t('Bordered'));
  $states = array(
    'invisible' => array(
      'select[name="li_style"]' => array('value' => '2')
      )
  );
  $states1 = array(
    'visible' => array(
      'select[name="li_style"]' => array('value' => '4') 
      )
  );
  $form['li_style'] = array(
    '#type' => 'select',
    '#title' => t('Style'),
    '#options' => $li_styles,
    '#default_value' => isset($attrs['li_style']) ? $attrs['li_style'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-md-6">',
  );
  $form['li_border'] = array(
    '#type' => 'select',
    '#title' => t('Border'),
    '#options' => $borders,
    '#default_value' => isset($attrs['li_border']) ? $attrs['li_border'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-md-3">',
    '#states' => $states,
  );
  $form['color'] = array(
    '#type' => 'select',
    '#title' => t('Color'),
    '#options' => $li_colors,
    '#default_value' => isset($attrs['color']) ? $attrs['color'] : 'red',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-md-3">',
    '#suffix' => '</div></div>',
    '#states' => $states1,
  );
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#default_value' => isset($attrs['text']) ? $attrs['text'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-md-6">',
  );
  $form['icon'] = array(
    '#type' => 'textfield',
    '#title' => t('Icon'),
    '#autocomplete_path' => 'admin/ajax/nd_visualshortcodes/icons_autocomplete/font_awesome',
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="row"><div class="col-md-6">',
    '#suffix' => '</div></div>',
    '#states' => $states,
  );
  return $form;
}

function hasta_shortcodes_shortcode_parallax_background($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= 'parallax-section';
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $uri = isset($file->uri) ? $file->uri : '';
  if (!$uri) {
    return '';
  }
  $attrs['style'] = $file ? 'background-image: url("' . file_create_url($file->uri) . '");' : '';
  $text = isset($attrs['ov_op']) && $attrs['ov_op'] ?  '<div class="' . $attrs['ov_op'] . ' parent-height">' . $text . '</div>' : '';
  $text = '<section' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    ' . $text . '
  </section>';
  return $text;
}

function hasta_shortcodes_shortcode_parallax_background_settings($attrs, $text) {
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Image'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $form['style_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => isset($attrs['style_height']) ? $attrs['style_height'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-6">',
    '#suffix' => '</div></div>',
  );
  $styles = array('' => t(' - Original - '));
  foreach(image_styles() as $name => $style) {
    $styles[$name] = $style['label'];
  }
  $form['image_style'] = array(
    '#type' => 'select',
    '#title' => t('Image Style'),
    '#options' => $styles,
    '#default_value' => isset($attrs['image_style']) ? $attrs['image_style'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $ov_op = array('section-overlay light' => t('Overlay - Light'), 'section-overlay orange-2' => t('Overlay - Orange'), 'section-overlay pink-2' => t('Overlay - Pink'), 'section-overlay yellow' => t('Overlay - Yellow'), 'section-overlay yellow-2' => t('Overlay - Light Yellow'), 'bg-opacity-1' => t('Opacity - 1'), 'bg-opacity-2' => t('Opacity - 2'), 'bg-opacity-3' => t('Opacity - 3'), 'bg-opacity-4' => t('Opacity - 4'), 'bg-opacity-5' => t('Opacity - 5'), 'bg-opacity-6' => t('Opacity - 6'), 'bg-opacity-7' => t('Opacity - 7'), 'bg-opacity-8' => t('Opacity - 8'), 'bg-opacity-9' => t('Opacity - 9'));
  $form['ov_op'] = array(
    '#type' => 'select',
    '#title' => t('Overlay / Opacity'),
    '#options' => $ov_op,
    '#default_value' => isset($attrs['ov_op']) ? $attrs['ov_op'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-6">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_pricing_table($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $pt_style = isset($attrs['pt_style']) ? $attrs['pt_style'] : '';
  $active = $attrs['pt_active'] ? ' active' : '';
  $link = isset($attrs['link']) ? url($attrs['link']) : '#';
  $title = isset($attrs['title']) ? $attrs['title'] : '';
  $price_simbol = isset($attrs['price_simbol']) ? $attrs['price_simbol'] : '';
  $price = isset($attrs['price']) ? $attrs['price'] : '';
  $price_for = isset($attrs['price_for']) ? $attrs['price_for'] : '';
  $btn_title = isset($attrs['btn_title']) ? $attrs['btn_title'] : '';
  switch ($pt_style) {
    case '3':
      $price = '<sup>' . $price_simbol . '</sup>' . $price . ' </div><i>' . $price_for . '</i>';
      $attrs['class'] .= 'pricetable-holder3' . $active . ' bmargin text-center';
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) .'>
        <div class="inner-holder">
          <h2 class="text-bold5 title ubuntu">' . $title . '</h2><br/>
            <div class="price-circle">
              <div class="price">
              ' . $price . '
              </div><br/>
                <ul class="plan_features">' . $text . '</ul>
                <a class="btn btn-border light" href="' . $link . '">' . $btn_title . '</a><br/><br/>
            </div>
      </div>';
      break;
    case '5' :
      $active = isset($attrs['pt_active']) && $attrs['pt_active'] ? 'active' : 'top';
      $act = isset($attrs['pt_active']) && $attrs['pt_active'] ? 'active' : '';
      $price = '<sup>' . $price_simbol . ' </sup>' . $price . ' <i><br/>' . $price_for . '</i>';
      $attrs['class'] .= 'pricetable-' . $active . '-bg-strip';
      $class = isset($attrs['pt_first']) && $attrs['pt_first'] ? 'pricetable-holder5 border-right ' . $act : 'pricetable-holder5 ' . $act;
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) .'></div>
      <div class="' . $class . '">
        <div class="price-circle">
          <div class="price">' . $price . '</div>
        </div><br/>
        <h3 class="title font-weight-5">' . $title . '</h3>
        <ul class="features-list">' . $text . '</ul>
          <div class="clearfix"></div><br/><br/>
          <a class="btn btn-green-4 btn-round" href="' . $link . '">' . $btn_title . '</a></div>';
      break;
    case '7' :
      $price = '<sup>' . $price_simbol . '</sup>' . $price . ' <i>' . $price_for . '</i>';
      $active = isset($attrs['pt_active']) && $attrs['pt_active'] ? 'active' : 'top';
      $img = base_path() . drupal_get_path('theme', 'hasta') . '/images/777.png';
      $recommend = isset($attrs['pt_active']) && $attrs['pt_active'] ? '<div class="ribbon"><img src="' . $img . '" alt=""/></div>' : '';
      $btn_color = isset($attrs['pt_active']) && $attrs['pt_active'] ? 'white' : 'orange-2 dark';
      $attrs['class'] .= 'pricetable-' . $active . '-bg-strip';
      $class = isset($attrs['pt_active']) && $attrs['pt_active'] ? 'pricetable-holder7 active bmargin' : 'pricetable-holder7';
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '></div>
          <div class="' . $class . '">'
            . $recommend . 
            '<div class="title-box">
            <h3 class="title font-weight-5 less-mar2">' . $title . '</h3>
            <div class="price">' . $price . '</div>
          </div>
        <ul class="features-list">' . $text . '</ul>
        <div class="clearfix"></div>
            <br/>
            <br/>
            <a class="btn btn-' . $btn_color . ' btn-xround" href="' . $link . '">' . $btn_title . '</a>
      </div>';
      break;
    default :
      $price = '<sup>' . $price_simbol . '</sup>' . $price . ' <i>' . $price_for . '</i>';
      $top_margin = $active == ' active' ? '' : '<div class="topmargin"></div>';
      $arrows = $attrs['pt_active'] ? '<div class="arrow"></div><div class="arrow two"></div>' : '';
      $first = $attrs['pt_first'] ?  ' first' : '';
      $active = isset($attrs['pt_active']) && $attrs['pt_active'] ? 'active' : '';
      $attrs['class'] .= 'pricetable-holder '. $active . ' bmargin';
      $class = 'pricetable' . $first;
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $top_margin . $arrows . '
        <div class="' . $class . '">
          <div class="title">
            <h2 class="text-white text-bold5">' . $title . '</h2>
          <div class="price">' . $price . '</div>
        </div>
          <ul class="plan_features">' . $text . '</ul>
          <a class="btn btn-border light btn-round" href="' . $link . '">' . $btn_title . '</a>
        </div>
      </div>';
      break;
  }
  return $text;
}

function hasta_shortcodes_shortcode_pricing_table_settings($attrs, $text) {
  $pt_styles = array('' => t('Light Table with Dark Title'), '5' => t('Dark Table'), '3' => t('Light Table with Orange Hover'), '7' => t('Light Table, Active = We Recommend'));
  $states = array(
    'invisible' => array('select[name="pt_style"]' => array('value' => '3')),
    'invisible' => array('select[name="pt_style"], .a' => array('value' => '7')),
  );
  $form['pt_style'] = array(
    '#type' => 'select',
    '#title' => t('Style'),
    '#options' => $pt_styles,
    '#default_value' => isset($attrs['pt_style']) ? $attrs['pt_style'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-sm-6">',
  );
  $form['pt_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#default_value' => isset($attrs['pt_active']) ? $attrs['pt_active'] : FALSE,
    '#prefix' => '</div><br/><div class="col-sm-3">',
  );
  $form['pt_first'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is it First Section?'),
    '#default_value' => isset($attrs['pt_first']) ? $attrs['pt_first'] : FALSE,
    '#prefix' => '</div><div class="col-sm-3">',
    '#states' => $states,
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class="col-sm-6">',
  );
  $form['price_simbol'] = array(
    '#type' => 'textfield',
    '#title' => t('Sign'),
    '#default_value' => isset($attrs['price_simbol']) ? $attrs['price_simbol'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class="col-sm-3">',
  );
  $form['price'] = array(
    '#type' => 'textfield',
    '#title' => t('Price'),
    '#default_value' => isset($attrs['price']) ? $attrs['price'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-6">',
  );
  $form['price_for'] = array(
    '#type' => 'textfield',
    '#title' => t('Price for'),
    '#default_value' => isset($attrs['price_for']) ? $attrs['price_for'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-3">',
  );
  $form['btn_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Button title'),
    '#default_value' => isset($attrs['btn_title']) ? $attrs['btn_title'] : 'Order Now',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class="col-sm-6">',
  );
  $form['link'] = array(
    '#type' => 'textfield',
    '#title' => t('Button link'),
    '#default_value' => isset($attrs['link']) ? $attrs['link'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="row"><div class="col-sm-6">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_content_box($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= 'text-box border padding-4';
  $text = str_replace('<img ', '<img class="img-responsive" ', $text);
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</div>';
  return $text;
}

function hasta_shortcodes_shortcode_countdown($attrs, $text) {
  $output = '';
  if(isset($attrs['time'])) {
    $attrs['class'] = 'countdown ' . (isset($attrs['type']) ? $attrs['type'] : 'clock');
    $time = date('Y/m/d', strtotime($attrs['time']));
    $output = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . ' data-time = "' . $time . '"></div>';
  }
  return $output;
}

function hasta_shortcodes_shortcode_countdown_settings($attrs, $text) {
  $form['time'] = array(
    '#type' => 'textfield',
    '#title' => t('End date'),
    '#description' => t('Example 2016/01/25'),
    '#default_value' => isset($attrs['time']) ? $attrs['time'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $type = array('clock' => t('White'), 'clock2' => t('Dark'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Style'),
    '#options' => $type,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hasta_shortcodes_shortcode_pricing_table_item($attrs, $text) {
  $text = '<li' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $attrs['description'] . '</li>';
  return $text;
}

function hasta_shortcodes_shortcode_pricing_table_item_settings($attrs, $text) {
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#attributes' => array('class' => array('form-control')),
    '#default_value' => isset($attrs['description']) ? $attrs['description'] : '',
  );
  return $form;
}

function hasta_shortcodes_shortcode_tabs_container($attrs, $text) {
  global $tab_content;
  global $tab_counter;
  $tab_counter = !$tab_counter ? 1 : $tab_counter + 1;
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $type = isset($attrs['type']) && $attrs['type'] == '1' ? '1' : '';
  if ($type == '1' && isset($attrs['bordered']) && $attrs['bordered']) {
    $attrs['class'] .='tabs15';
    $type = '15';
  }
  else {
    $attrs['class'] .= $type == '1'  ? 'tabs' . $type : 'tabs';
  }
    $text = $type == '' ? str_replace('TABTYPE', 'demo', $text) : str_replace('TABTYPE', 'example-' . $type , $text);
  $tab_content = $type == '' ? str_replace('TABTYPE', 'demo', $tab_content) : str_replace('TABTYPE', 'example-' . $type , $tab_content);
  $class = 'tabs-content' . $type;  
  $tab_content = str_replace('tabs-panel', 'tabs-panel' . $type, $tab_content); 
  $text = '<ul' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    ' . $text . '
  </ul>
    <div class="' . $class . '">
      ' . $tab_content . '
    </div>';
  $tab_content = '';
  $tab_counter = '';
  return $text;
}

function hasta_shortcodes_shortcode_tabs_container_settings($attrs, $text) {
  $types = array('' => t('Vertical'), '1' => t('Horizontal'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $types,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-md-6">',
    
  );
  $states = array(
    'visible' => array('select[name="type"]' => array('value' => '1')),
  );
  $form['bordered'] = array(
    '#type' => 'checkbox',
    '#title' => t('Bordered Tabs'),
    '#default_value' => isset($attrs['bordered']) ? $attrs['bordered'] : FALSE,
    '#prefix' => '</div><br/><div class="col-sm-6">',
    '#suffix' => '</div></div>',  
    '#states' => $states,
  );
  return $form;
}

function hasta_shortcodes_shortcode_tab($attrs, $text) {
  global $tab_content;
  global $tab_counter;
  $tab_counter++;
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $href = '#TABTYPE-tab-' . $tab_counter;
  $tab_content .= '<div id="TABTYPE-tab-' . $tab_counter . '" class="tabs-panel">' . $text . '</div>';
  $text = '<li' . _hasta_shortcodes_shortcode_attributes($attrs) . '><a href="' . $href . '" target="_self">' . $attrs['title'] . '</a></li>';
  return $text;
}

function hasta_shortcodes_shortcode_tab_settings($attrs, $text) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Tab Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
  );
  return $form;
}

function hasta_shortcodes_shortcode_icon_box($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $side = ($attrs['type'] == '3' || $attrs['type'] == 'minimal2') ? $attrs['icon_side'] : '';
  $active = $attrs['active'] ? ' active ' : ' ';
  $icon = isset($attrs['icon']) ? $attrs['icon'] : '';
  $begin = '';
  $end = '';
  $link = isset($attrs['link']) ? url($attrs['link']) : '#';
  switch ($attrs['type']) {
    case 'minimal2' :
      $attrs['class'] .= 'item-holder';
      $box_color = isset($attrs['dark_light']) && $attrs['dark_light'] ? ' white' : '';
      $class = 'icon-plain-small ' . $side . $box_color;
      $button = '';
      $text_side = $side == 'right' ? 'left' : 'right';
      $begin = '<div class="text-box-' . $text_side . ' less-padding-1">';
      $end = '</div>';
      break;
    case '1':
      $attrs['class'] .= 'feature-box1 bmargin' . $active;
      $class = 'iconbox-tiny left round grayoutline2';
      $begin = '<div class="text-box-right">';
      $end = '</div>';
      $button = '<a href="' . $link . '" class="read-more">' . $attrs['button'] . ' <i class="fa fa-angle-double-right"></i></a>';
      break;
    case '2':
      $attrs['class'] .= 'feature-box7 text-center' . $active . 'bmargin';
      $button = '<a class="btn btn-border light btn-round" href="' . $link .'">' . $attrs['button'] . '</a>';
      break;
    case '3':
      $attrs['class'] .= 'feature-box8' . $active;
      $class = 'iconbox-small ' . $side;
      $text_side = $side == 'right' ? 'left' : 'right';
      $begin = '<div class="text-box-' . $text_side . '">';
      $end = '</div>';
      $button = '';
      break;
    case '4':
      $attrs['class'] .= 'feature-box9 text-center' . $active . 'bmargin';
      $class = 'iconbox-xlarge grayoutline2';
      $begin = '<br/>';
      $button = '';
      break;
    case '6':
      $attrs['class'] .= 'feature-box6 ' . $active;
      if (isset($attrs['dark_light']) && $attrs['dark_light']) {
        $class = 'iconbox-tiny round left grayoutline'; 
      }
      else {
        $class = 'iconbox-tiny round left grayoutline2';
      }
      $begin = '<div class="text-box-right">';
      $end = '</div>';
      $button = '';
      break;
    case '19' : 
      $attrs['class'] .= 'feature-box19 ' . $active;
      $class = 'iconbox-small round grayoutline2 orange2 left';
      $begin = '<div class="text-box-right">';
      $end = '</div>';
      $button = '';
      break;
    case 'minimal' :
      $attrs['class'] .= 'iconbox-xtiny left round grayoutline2';
      break;
    case '103' :
      $attrs['class'] .= 'feature-box-103 text-center bmargin' . $active;
      $class = 'iconbox-medium round grayoutline2';
      $begin = '<br/>';
      $button = '';
      break;
    case 'contact-info-holder' :
      $attrs['class'] .= 'contact-info-holder ' . $active;
      break;
    default:
      $attrs['class'] .= 'feature-box20' . $active . 'text-center';
      $class = 'iconbox-tiny dark center';
      $button = '<a class="read-more dark" href="' . $link . '"><i class="fa fa-angle-double-right"></i> ' . $attrs['button'] . '</a>';
      break;
  }
  switch ($attrs['type']) {
    case '2':
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <span class="' . $icon .'"></span>
        <br/><br/>
         ' . $text . '
        <br/><br/>' . $button . '
      </div>';
      break;
    case 'minimal' : 
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '><i class="' . $icon . '"></i></div>' . $text;
      break;
    case 'contact-info-holder' :
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
       <div class="sideline"></div>
          <div class="iconbox-xmedium round white"><i class="' . $icon . '"></i></div>
            <br/>
            ' . $text . '
      </div>';
      break;
    default:
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <div class="' . $class . '">
          <span class="' . $icon . '"></span>
        </div>' . $begin . $text . $button . $end . '
      </div>';
      break;
  }
  return $text;
}

function hasta_shortcodes_shortcode_icon_box_settings($attrs, $text) {
  $types = array('1' => t('Feature Box'), '2' => t('Feature Card'), '3' => t('Side icon'), '4' => t('Large Icon Box'), '5' => t('Top Small Icon'), '6' => t('Light Icon Left, Text, Non-colored'), '19' => t('Icon Left, Text, Colored'), 'minimal' => t('Black and White Icon'), '103' => t('Large Round Icon, Text bottom'), 'contact-info-holder' => t('White Large Round Icon, Text Bottom'), 'minimal2' => t('Plain Side Icon'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $types,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-sm-6">',
  );
  $states2 = array(
    'invisible' => array(
      'select[name="type"]' => array('!value' => '6'),
      'select[name="type"], .a' => array('!value' => 'minimal2'),
    ),
  );
  $color = array('white' => t('White'), 'gray' => t('Gray'), 'dark' => t('Dark'));
  $form['dark_light'] = array(
    '#type' => 'select',
    '#title' => t('Icon Color'),
    '#options' => $color,
    '#default_value' => isset($attrs['dark_light']) ? $attrs['dark_light'] : 'dark',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-3">',
    '#states' => $states2,
  );
    $states3 = array(
    'visible' => array(
      'select[name="type"]' => array('!value' => '6'),
      'select[name="type"], .a' => array('!value' => 'minimal'),
      'select[name="type"], .a, .a' => array('!value' => 'minimal2'),
    )
  );
  $form['active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#default_value' => isset($attrs['active']) ? $attrs['active'] : FALSE,
    '#prefix' => '</div><div class="col-sm-3">',
    '#states' => $states3,
  );
  $form['icon'] = array(
    '#title' => t('Icon'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'admin/ajax/nd_visualshortcodes/icons_autocomplete/font_awesome',
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class="col-sm-6">',
  );
  $states = array(
    'invisible' => array(
      'select[name="type"]' => array('!value' => '3'),
      'select[name="type"], .a' => array('!value' => 'minimal2'),
    ),
  );
  $sides = array('right' => ('Right'), 'left' => t('Left'));
  $form['icon_side'] = array(
    '#type' => 'select',
    '#title' => t('Icon Position'),
    '#options' => $sides,
    '#default_value' => isset($attrs['icon_side']) ? $attrs['icon_side'] : 'right',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-6">',
    '#states' => $states,
  );
  $states1 = array(
    'visible' => array(
      'select[name="type"]' => array('!value' => '3'),
      'select[name="type"], .a' => array('!value' => '4'),
      'select[name="type"], .a, .a' => array('!value' => '6'),
      'select[name="type"], .a, .a, .a' => array('!value' => '19'),
      'select[name="type"], .a, .a, .a, .a' => array('!value' => 'minimal'),
      'select[name="type"], .a, .a, .a, .a, .a' => array('!value' => '103'),
      'select[name="type"], .a, .a, .a, .a, .a, .a' => array('!value' => 'contact-info-holder'),
      'select[name="type"], .a, .a, .a, .a, .a, .a, .a' => array('!value' => 'minimal2'),
      ),
  );
  $form['button'] = array(
    '#type' => 'textfield',
    '#title' => t('Button'),
    '#default_value' => isset($attrs['button']) ? $attrs['button'] : 'Read more',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class="col-sm-6">',
    '#states' => $states1,
  );
  $form['link'] = array(
    '#type' => 'textfield',
    '#title' => t('Link'),
    '#default_value' => isset($attrs['link']) ? $attrs['link'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-6">',
    '#states' => $states1,
  );
  return $form;
}

function hasta_shortcodes_shortcode_video($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? ' ' . $attrs['class'] : '';
  $width = isset($attrs['width']) ? 'width="' . $attrs['width'] .'"' : '';
  $height = isset($attrs['height']) ? 'height ="' . $attrs['height'] . '"' : '';
  $iframe_attrs = $width . ' ' . $height;
  $attrs['class'] .= ' video-wrapper';
  $attrs['url'] = isset($attrs['url']) ? $attrs['url'] : ''; 
  if(strpos($attrs['url'], 'vimeo') !== FALSE) {
     preg_match('|/(\d+)|', $attrs['url'], $matches);
     $video_url = '//player.vimeo.com/video/' . $matches[1] . '?title=0&amp;byline=0&amp;portrait=0&amp;color=FFFFFF';
  }
  else if(strpos($attrs['url'], 'youtube') !== FALSE) {
     if (strpos($attrs['url'], '?v=') !== false) {
        $id = substr($attrs['url'], strpos($attrs['url'], '?v=') + 3);
        $video_url = '//www.youtube.com/embed/' . $id .'?theme=dark&color=white';
     }
     else $video_url = $attrs['url'];
  }
  if (isset($attrs['video_source']) && $attrs['video_source'] == 'internet') {
    $text = '
    <div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
      <iframe src="' . $video_url . '" ' . $iframe_attrs . '></iframe>
    </div>';
  }
  else {
    $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
    $uri = isset($file->uri) ? $file->uri : '';
    if(!$uri) {
      return '';
    }
    if (strpos($file->uri, 'mp4') !== false) {
      $type = 'video/mp4';
    }
    else {
      $type = 'video/webm';
    }
    $file = isset($attrs['vfid']) && !empty($attrs['vfid']) ? file_load($attrs['vfid']) : '';
    $video_uri = isset($file->uri) ? $file->uri : '';
    if(!$video_uri) {
      return '';
    }
    $text = '<div class="video-wrapper">
      <video ' . $width . ' ' . $height . 'poster="' . file_create_url($uri) . '" controls="controls">
        <source type="' . $type . '" src="' . file_create_url($video_uri) . '"></source>
        Your browser doesn\'t support HTML5 video.
      </video>
    </div>';
  }
  return $text;
}

function hasta_shortcodes_shortcode_video_settings($attrs, $text) {
  $video_source = array('local' => t('Local'), 'internet' => t('Internet'));
  $form['video_source'] = array(
    '#title' => t('Video source'),
    '#type' => 'select',
    '#options' => $video_source,
    '#attributes' => array('class' => array('form-control')),
    '#default_value' => isset($attrs['video_source']) ? $attrs['video_source'] : 'internet',
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $states1 = array (
    'visible' => array(
      'select[name="video_source"]' => array('value' => 'local'),
    ),
  );
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Placeholder'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '</div><div class = "col-sm-9">',
    '#suffix' => '</div></div>',
    '#states' => $states1,
  );
  $v_filename = isset($attrs['vfid']) && !empty($attrs['vfid']) ? file_load($attrs['vfid'])->uri :'';
  $video = $v_filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $v_filename)) : '';
  $form['vfid'] = array(
    '#type' => 'textfield',
    '#title' => t('Video'),
    '#default_value' => isset($attrs['vfid']) ? $attrs['vfid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $video . '</div><a href = "#" class = "media-upload button">' . t('Upload Video') .'</a><a href = "#" class = "media-remove button">' . t('Remove Video') .'</a>',
    '#prefix' => '<div class = "row"><div class = "col-sm-12">',
    '#suffix' => '</div></div>',
    '#states' => $states1,
  );
  $states2 = array (
    'visible' => array(
      'select[name="video_source"]' => array('value' => 'internet'),
    ),
  );
  $form['url'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Video Url'),
    '#default_value' => isset($attrs['url']) ? $attrs['url'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#description' => t('Supports: YouTube or Vimeo in case "Internet" and mp4 or webm in case "Local"'),
    '#prefix' => '<div class = "row"><div class = "col-sm-12">',
    '#suffix' => '</div></div>',
    '#states' => $states2,
  );
  $form['width'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Width'),
    '#default_value' => isset($attrs['width']) ? $attrs['width'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $form['height'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Height'),
    '#default_value' => isset($attrs['height']) ? $attrs['height'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_progress_bar($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= 'progress progressbar-style' . $attrs['type'];
  $percent = isset($attrs['percent']) ? $attrs['percent'] : '';
  $title = isset($attrs['title']) ? $attrs['title'] : '';
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    <div class="progress-bar" role="progressbar" aria-valuenow="' . $percent . '" aria-valuemin="0" aria-valuemax="100" style="width: ' . $percent . '%;">
     ' . $title . ' ' . $percent . '% 
    </div>
  </div>';
  return $text;
}

function hasta_shortcodes_shortcode_progress_bar_settings($attrs, $text) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-sm-12">',
  );
  $form['percent'] = array(
    '#type' => 'textfield',
    '#title' => t('Percent'),
    '#default_value' => isset($attrs['percent']) ? $attrs['percent'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class="col-sm-6">',
  );
  $types = array('1' => t('Orange, Text In'), '2' => t('Dark, Text Under'), '3' => t('Yellow, Text White'), '4' => t('Yellow, Text Dark'), '5' => t('Blue, Text In'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $types,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-6">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hasta_shortcodes_shortcode_quote($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $uri = isset($file->uri) ? $file->uri : '';
  if (!$uri) {
    return '';
  }
  $attributes = array('style' => '');
  $img = isset($attrs['image_style']) && $attrs['image_style'] ? (theme('image_style', array('style_name' => $attrs['image_style'], 'title' => '', 'path' => $uri, 'attributes' => $attributes))) : (theme('image', array('title' => '', 'path' => $uri, 'attributes' => $attributes)));
  $name = isset($attrs['name']) ? $attrs['name'] : '';
  $description = isset($attrs['description']) ? $attrs['description'] : '';
  $active = isset($attrs['active']) && $attrs['active'] ? ' active ' : ' ';
  switch ($attrs['type']) {
    case '5' :
      $attrs['class'] .= 'testimonials3' . $active . ' bmargin';
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <div class="img-holder">
          <div class="arrow-down"></div>
            <div class="img-inner overflow-hidden">' . $img . '</div> </div>
            <div class="text-box-right more-padding-3">
              ' . $text . '
            <div class="divider-line2"></div>
              <h6 class="less-mar1">' . $name . '</h6>
              <span class="text-orange-2">' . $description . '</span> 
        </div>
      </div>';
      break;
    case '3':
      $attrs['class'] .= 'col-md-12 col-sm-12 col-xs-12 text-center nopadding';
      $text = $text . '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <div class="iconbox-medium round center overflow-hidden">' . $img . '</div>
        <h5 class="less-mar1 text-white">' . $name . '</h5>
        <span class="text-orange-2">' . $description . '</span>
      </div>
      <br/>';
      break;
    case '4' :
      $attrs['class'] .= 'testimonials-holder two' . $active . ' bmargin';
      $img_quote = base_path() .drupal_get_path('theme', 'hasta') . '/images/site-img13.png';
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <div class="image-left"><div class="img-inner overflow-hidden">' . $img . '</div></div>
        <div class="text-box-right">
          <img src="' . $img_quote . '" style="float: left;" alt=""/>' . $text . '
          <br/>
          <h6 class="nomargin">' . $name . '</h6>
          <span>' . $description . '</span>
        </div>
      </div>';
      break;
    default:
      $attrs['class'] = 'testimonials' . $attrs['type'];
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <div class="textbox">
          <div class="arrow-down"></div>
          ' . $text . '
          </div>
        <div class="image-left">
          <div class="imgholder">
            <div class="img-inner overflow-hidden">' . $img . '</div>
          </div>
        </div>
        <div class="text-box-right">
          <h5 class="less-mar1 paddtop3">' . $name . '</h5>
          <span class="text-orange-2">' . $description . '</span>
        </div>
      </div>';
      break;
  }
  return $text;
}

function hasta_shortcodes_shortcode_quote_settings($attrs, $text) {
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Photo'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class="row"><div class = "col-sm-9">',
  );
  $states = array(
    'invisible' => array(
      'select[name="type"]' => array('!value' => '4'),
      'select[name="type"], .a' => array('!value' => '5'),
    )
  );
  $form['active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#default_value' => isset($attrs['active']) ? $attrs['active'] : FALSE,
    '#prefix' => '</div><br/><div class = "col-sm-2">',
    '#states' => $states,
  );
  $styles = array('' => t(' - Original - '));
  foreach(image_styles() as $name => $style) {
    $styles[$name] = $style['label'];
  }
  $form['image_style'] = array(
    '#type' => 'select',
    '#title' => t('Image Style'),
    '#options' => $styles,
    '#default_value' => isset($attrs['image_style']) ? $attrs['image_style'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class = "col-sm-6">',
  );
  $types = array('1' => t('Image w/o Border'), '2' => t('Image with Border'), '3' => t('Rounded '), '4' => t('White Box, Round Image'), '5' => t('Round image with arrow down'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $types,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-sm-6">',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => isset($attrs['name']) ? $attrs['name'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class="col-sm-4">',
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => isset($attrs['description']) ? $attrs['description'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#size' => 80,
    '#maxlength' => 250, 
    '#prefix' => '</div><div class="col-sm-8">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_info_box($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $link = isset($attrs['link']) ? url($attrs['link']) : '#';
  $btn_title = isset($attrs['btn_title']) ? $attrs['btn_title'] : '';
  $title = isset($attrs['title']) ? $attrs['title'] : '';
  $button = '';
  $image_holder = '';
  $end_holder = '';
  $img = '';
  switch ($attrs['type']) {
  	case '1':
  	  $attrs['class'] .= 'feature-box-84 text-center bmargin';
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</div>';
  	  break;
  	case '2':
  	  $attrs['class'] .= 'text-box padding-4 section-orange-2';
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</div>';
  	  break;
    case '4' : 
      $attrs['class'] .= 'feature-box69 bmargin';
      $image_holder = '<div class="image-holder"><div class="overlay bg-opacity-' . $attrs['bg_opacity'] . '">';
      $end_holder = '</div>';
      $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
      $uri = isset($file->uri) ? $file->uri : '';
      if (!$uri) {
        return '';
      }
      $attributes = array('style' => '');
      $img = isset($attrs['image_style']) && $attrs['image_style'] ? (theme('image_style', array('style_name' => $attrs['image_style'], 'title' => '', 'path' => $uri, 'attributes' => $attributes))) : (theme('image', array('title' => '', 'path' => $uri, 'attributes' => $attributes)));
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $image_holder . $text . $button . $end_holder . $img . $end_holder . '</div>';
      break;
    case '5' :
      $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
      $uri = isset($file->uri) ? $file->uri : '';
      if (!$uri) {
        return '';
      }
      $img = file_create_url($uri);
      $attrs['class'] .= 'feature-box-101 bmargin';
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
        <div class="col-md-6 col-sm-6 col-xs-12 nopadding">
          <div class="circle">
           <h4 class="title text-white">' . $title . '</h4>
          </div>
          <div class="img"><img src="' . $img . '" alt=""/></div>
        </div>
          <div class="col-md-6 col-sm-6 col-xs-12 padding-left-4">' . $text . '<br/>
          <a href="' . $link . '" class="read-more orange-2"> <i class="fa fa-long-arrow-right"></i> ' . $btn_title . '</a> </div>
      </div>';
      break;
  	default:
  	  $attrs['class'] .= 'feature-box65 bmargin';
  	  $button = '<a class="read-more orange" href="' . $link . '"><i class="fa fa-long-arrow-right"></i> ' . $btn_title . '</a>';
      $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . $button . '</div>';
  	  break;  	
  }
  return $text;
}

function hasta_shortcodes_shortcode_info_box_settings($attrs, $text) {
  $types = array('1' => t('Light Box'), '2' => t('Orange Box'), '3' => t('Box with link'), '4' => t('Image Box'), '5' => t('Box with Round Image'));
  $form['type'] = array(
  	'#type' => 'select',
  	'#title' => t('Type'),
  	'#options' => $types,
  	'#default_value' => isset($attrs['type']) ? $attrs['type'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
  );
  $states_link = array (
    'visible' => array (
      'select[name="type"]' => array ('!value' => '1'),
      'select[name="type"], .a' => array ('!value' => '2'),
      'select[name="type"], .b' => array ('!value' => '4'),
    ),
  );
  $states_image = array (
    'visible' => array (
      'select[name="type"]' => array ('!value' => '1'),
      'select[name="type"], .a' => array ('!value' => '2'),
      'select[name="type"], .b' => array ('!value' => '3'),
    ),
  );
  $states_opacity = array (
    'visible' => array (
      'select[name="type"]' => array ('value' => '4'),
    ),
  );
  $states_title = array (
    'visible' => array (
      'select[name="type"]' => array ('value' => '5'),
    ),
  );
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Background Image'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class="row"><div class = "col-sm-12">',
    '#states' => $states_image,
  );
  $styles = array('' => t(' - Original - '));
  foreach(image_styles() as $name => $style) {
    $styles[$name] = $style['label'];
  }
  $form['image_style'] = array(
    '#type' => 'select',
    '#title' => t('Image Style'),
    '#options' => $styles,
    '#default_value' => isset($attrs['image_style']) ? $attrs['image_style'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class="row"><div class = "col-sm-6">',
    '#states' => $states_image,
  );
  $bg_opacity = array('1' => t('1'), '2' => t('2'), '3' => t('3'), '4' => t('4'), '5' => t('5'), '6' => t('6'), '7' => t('7'), '8' => t('8'), '9' => t('9'));
  $form['bg_opacity'] = array(
    '#type' => 'select',
    '#title' => t('Background Opacity'),
    '#options' => $bg_opacity,
    '#default_value' => isset($attrs['bg_opacity']) ? $attrs['bg_opacity'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#states' => $states_opacity,
  );
  $form['btn_title'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Button'),
  	'#default_value' => isset($attrs['btn_title']) ? $attrs['btn_title'] : 'Read more',
  	'#attributes' => array('class' => array('form-control')),
  	'#prefix' => '</div></div><div class="row"><div class="col-md-6">',
  	'#states' => $states_link,
  );
  $form['link'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Link'),
  	'#default_value' => isset($attrs['link']) ? $attrs['link'] : '',
  	'#attributes' => array('class' => array('form-control')),
  	'#prefix' => '</div><div class="col-md-6">',
  	'#suffix' => '</div></div>',
  	'#states' => $states_link,
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
    '#states' => $states_title,
  );
  return $form;
}

function hasta_shortcodes_shortcode_section($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $text = '<section' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</section>';
  return $text;
}

function hasta_shortcodes_shortcode_logo_list($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $type = isset($attrs['type']) ? $attrs['type'] : '';
  $attrs['class'] = $type == 'payments' ? 'payment-type' :'clientlogo-list ' . $type;
  $text = '<ul' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</ul>';
  return $text;
}

function hasta_shortcodes_shortcode_logo_list_settings($attrs, $text) {
  $types = array('' => t('Smaller Icons'), 'two' => t('Larger Icons'), 'payments' => t('Payments List'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $types,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_logo_list_item($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $uri = isset($file->uri) ? $file->uri : '';
  if (isset($attrs['last_logo']) && $attrs['last_logo']) {
    $attrs['class'] .= 'last';
  }
  $txt = isset($attrs['text']) ? $attrs['text'] : '';
  $img = isset($attrs['fid']) ? '<img src="' . file_create_url($uri) . '" alt=""/>' : ''; 
  $text = '<li' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $txt . $img . '</li>';
  return $text;
}

function hasta_shortcodes_shortcode_logo_list_item_settings($attrs, $text) {
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class="row"><div class = "col-sm-9">',
  );
  $form['last_logo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Last logo?'),
    '#default_value' => isset($attrs['last_logo']) ? $attrs['last_logo'] : FALSE,
    '#prefix' => '</div><br/><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#default_value' => isset($attrs['text']) ? $attrs['text'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_video_bg($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= 'videobgholder';
  $start_at = isset($attrs['start_at']) ? $attrs['start_at'] : '0';
  $stop_at = isset($attrs['stop_at']) ? $attrs['stop_at'] : '0';
  $showcontrols = isset($attrs['showcontrols']) && $attrs['showcontrols'] ? 'true' : 'false';
  $autoplay = isset($attrs['autoplay']) && $attrs['autoplay'] ? 'true' : 'false';
  $loop = isset($attrs['loop']) && $attrs['loop'] ? 'true' : 'false';
  $mute = isset($attrs['mute']) && $attrs['mute'] ? 'true' : 'false';
  $id = substr($attrs['video'], strpos($attrs['video'], '?v=') + 3);
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    <div class="wrapper">
      <div id="customElement">
        <div class="container-fluid nopadding">
            <div class="video-overlay bg-opacity-5">
              <div class="container video-toppadd video-bopadd">
                ' . $text . '
                <div class="col-md-12 text-center">  
                <button id="togglePlay" class="command vbutton pause" onclick="jQuery(\'#video\').YTPTogglePlay(changeLabel)">' . t('Pause') . '</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    <a id="video" class="player" data-property="{videoURL:\'' . $id . '\',containment:\'#customElement\', showControls:' . $showcontrols . ', autoPlay:' . $autoplay . ', loop:' . $loop . ', vol:50, mute:' . $mute . ', startAt:' . $start_at . ',  stopAt:' . $stop_at . ', opacity:1, addRaster:true, quality:\'hd720\', optimizeDisplay:true}">' . t('My video') . '</a>
  </div>';
  return $text;
}

function hasta_shortcodes_shortcode_video_bg_settings($attrs, $text) {
  $form['video'] = array(
    '#type' => 'textfield',
    '#title' => t('Video Background'),
    '#default_value' => isset($attrs['video']) ? $attrs['video'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#description' => t('Supports: Only YouTube.'),
    '#prefix' => '<div class="row"><div class="col-sm-12">',
  );
  $form['start_at'] = array(
    '#type' => 'textfield',
    '#title' => t('Start At'),
    '#default_value' => isset($attrs['start_at']) ? $attrs['start_at'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#description' => t('Second'),
    '#prefix' => '</div></div><div class="row"><div class="col-sm-2">',
  );
  $form['stop_at'] = array(
    '#type' => 'textfield',
    '#title' => t('Stop At'),
    '#default_value' => isset($attrs['stop_at']) ? $attrs['stop_at'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#description' => t('Second'),
    '#prefix' => '</div><div class="col-sm-2">',
  );
  $form['autoplay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Autoplay'),
    '#default_value' => isset($attrs['autoplay']) ? $attrs['autoplay'] : FALSE,
    '#prefix' => '</div><br/><div class = "col-sm-2">',
  );
  $form['loop'] = array(
    '#type' => 'checkbox',
    '#title' => t('Loop'),
    '#default_value' => isset($attrs['loop']) ? $attrs['loop'] : FALSE,
    '#prefix' => '</div><div class = "col-sm-2">',
  );
  $form['showcontrols'] = array(
    '#type' => 'checkbox',
    '#title' => t('Controls'),
    '#default_value' => isset($attrs['showcontrols']) ? $attrs['showcontrols'] : FALSE,
    '#prefix' => '</div><div class = "col-sm-2">',
  );
  $form['mute'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mute'),
    '#default_value' => isset($attrs['mute']) ? $attrs['mute'] : FALSE,
    '#prefix' => '</div><div class = "col-sm-2">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_split_section($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  switch ($attrs['bg']) {
      case '2':
        $attrs['class'] .= 'section-light section-side-image clearfix';
        break;
      case '3':
        $attrs['class'] .= 'section-dark section-side-image clearfix';
        break; 
      default:
        $attrs['class'] .= 'section section-side-image clearfix';
        break;
  }    
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $uri = isset($file->uri) ? $file->uri : '';
  if (!$uri) {
    return '';
  }
  $img = file_create_url($uri);
  if ($attrs['type'] == '1') {
  $text = '<section' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    <div class="img-holder col-md-6 col-sm-3 pull-left">
      <div class="background-imgholder" style="background:url(' . $img . ');"> <img class="nodisplay-image" src="' . $img . '" alt=""/> </div>
    </div>
      <div class="container-fluid">
        <div class="row">
          <div class="col-md-7 col-md-offset-5 col-sm-8 col-sm-offset-2 text-inner clearfix align-left">
            <div class="text-box white padding-7">
            ' . $text . '
            </div>
          </div>
        </div>
      </div>
  </section>';
  }
  else {
    $text = '<section' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
      <div class="img-holder col-md-6 col-sm-3 pull-left">
        <div class="background-imgholder" style="background: url(' . $img . ')">
         <img class="nodisplay-image" src="' . $img . '" alt=""/>
        </div>
      </div>
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-5 col-md-offset-7 col-sm-8 col-sm-offset-4 text-inner clearfix align-left">
          <div class="text-box">
          ' . $text . '
          </div>
        </div>
      </div>
    </div>
  </section>';
  }
  return $text;
}

function hasta_shortcodes_shortcode_split_section_settings($attrs, $text) {
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Background'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class="row"><div class="col-sm-12">',
    '#suffix' => '</div></div>',
  );
  $type = array('1' => t('Content block on image'), '2' => t('Content block near image'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $type,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
    '#suffix' => '</div>',
  );
  $bg = array('1' => t('Light'), '2' => t('Gray'), '3' => t('Dark'));
  $form['bg'] = array(
    '#type' => 'select',
    '#title' => t('Background'),
    '#options' => $bg,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "col-sm-6">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_gmap($attrs, $text) {
  $attrs['class'] = 'map';
  $attrs['data-zoom'] = isset($attrs['zoom']) ? $attrs['zoom'] : 6;
  $attrs['data-type'] = isset($attrs['type']) ? $attrs['type'] : 'HYBRID';
  $attrs['data-address'] = isset($attrs['address']) ? $attrs['address'] : '';
  $text = '<div ' . _hasta_shortcodes_shortcode_attributes($attrs) . '></div>';
  return $text;
}

function hasta_shortcodes_shortcode_gmap_settings($attrs, $text) {
  $types = array('HYBRID', 'SATELLITE', 'ROADMAP', 'TERRAIN');
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array_combine($types, $types),
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
  );
  $form['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#default_value' => isset($attrs['address']) ? $attrs['address'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $form['zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom'),
    '#default_value' => isset($attrs['zoom']) ? $attrs['zoom'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $form['style_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => isset($attrs['style_height']) ? $attrs['style_height'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_feature_step($attrs, $text) {
  $attrs['class'] = 'feature-box-102 bmargin text-center';
  $number = isset($attrs['number']) ? $attrs['number'] : '';
  $title = isset($attrs['title']) ? $attrs['title'] : '';
  $text = '<div' . _hasta_shortcodes_shortcode_attributes($attrs) . '>
    <div class="number-' . $number . '"></div>
    <br>
    <h4>' . $title . '</h4>
    ' . $text . '
  </div>';
  return $text;
}

function hasta_shortcodes_shortcode_feature_step_settings($attrs, $text) {
  $types = array(1 => 1, 2, 3, 4);
  $form['number'] = array(
    '#type' => 'select',
    '#title' => t('Step Number'),
    '#options' => $types,
    '#default_value' => isset($attrs['number']) ? $attrs['number'] : 1,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-md-3">',
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class="col-md-9">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hasta_shortcodes_shortcode_title($attrs, $text) {
  $size = isset($attrs['size']) ? $attrs['size'] : 'h3';
  $attrs['title1'] = isset($attrs['title1']) ? $attrs['title1'] : '';
  $attrs['title2'] = isset($attrs['title2']) ? '<span class = "text-orange-2">' . $attrs['title2'] . '</span>' : '';
  $attrs['title3'] = isset($attrs['title3']) ? $attrs['title3'] : '';
  $attrs['class'] = isset($attrs['uppercase']) && $attrs['uppercase'] ? 'uppercase ' : '';
  $attrs['class'] .= isset($attrs['type']) ? ' ' . $attrs['type'] : '';
  $attrs['class'] .= isset($attrs['font_color']) ? ' ' . $attrs['font_color'] : '';
  $title = $attrs['title1'] . $attrs['title2'] . $attrs['title3'];
  $text = '<'. $size . ' ' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $title . '</' . $size . '>' . $text;
  return $text;
}

function hasta_shortcodes_shortcode_title_settings($attrs, $text) {
  $size = array('h1' => t('H1'), 'h2' => t('H2'), 'h3' => t('H3'), 'h4' => t('H4'), 'h5' => t('H5'), 'h6' => t('H6'));
  $form['size'] = array(
    '#title' => t('Size'),
    '#type' => 'select',
    '#options' => $size,
    '#default_value' => isset($attrs['size']) ? $attrs['size'] : 'h6',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $type = array('' => t('Default'), 'f30px700w' => t('30 px, 700 weight'), 'section-title' => t('30 px, 400 weight'), 'nopadding lspace-1' => t('16 px, 10 px Letter-spacing'), 'paddtop1 dosis font-weight-5 lspace-sm' => t('500 weight, 5 px Letter-spacing'), 'font-weight-6 less-mar1 nopadding' => t('600 weight'));
  $form['type'] = array(
    '#title' => t('Type'),
    '#type' => 'select',
    '#options' => $type,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $font_color = array(
    '' => 'None',
    'text-white' => 'White',
    'text-black' => 'Black',
    'text-gray' => 'Gray',
  );
  $form['font_color'] = array(
    '#title' => t('Font color'),
    '#type' => 'select',
    '#options' => $font_color,
    '#default_value' => isset($attrs['font_color']) ? $attrs['font_color'] : 'text-white',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $form['uppercase'] = array(
    '#title' => t('Uppercase'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['uppercase']) ? $attrs['uppercase'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><br/><div class = "col-sm-3">',
  );
  $form['title1'] = array(
    '#title' => t('Title'),
    '#description' => t('Begin'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['title1']) ? $attrs['title1'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class = "row"><div class = "col-sm-12">',
  );
  $form['title2'] = array(
    '#title' => t(' '),
    '#description' => t('Orange text'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['title2']) ? $attrs['title2'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class = "row"><div class = "col-sm-12">',
  );
  $form['title3'] = array(
    '#description' => t('End'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['title3']) ? $attrs['title3'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class = "row"><div class = "col-sm-12">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_sub_title($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= isset($attrs['t_align']) ? 'sub-title' . $attrs['t_align'] : 'sub-title';
  $attrs['class'] .= isset($attrs['t_color']) ? ' text-' . $attrs['t_color'] : '';
  $attrs['description1'] = isset($attrs['description1']) ? $attrs['description1'] : '';
  $attrs['description2'] = isset($attrs['description2']) ? '<span class = "text-' . $attrs['text_color'] . '">' . $attrs['description2'] . '</span>' : '';
  $attrs['description3'] = isset($attrs['description3']) ? $attrs['description3'] : '';
  $text = $attrs['description1'] . $attrs['description2'] . $attrs['description3'];
  $text = '<p' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</p>';
  return $text;
}

function hasta_shortcodes_shortcode_sub_title_settings($attrs, $text) {
  $align = array('-left' => t('Left'), '' => t('Center'), '-right' => t('Right'));
  $form['t_align'] = array(
    '#title' => t('Align'),
    '#type' => 'select',
    '#options' => $align,
    '#default_value' => isset($attrs['t_align']) ? $attrs['t_align'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $text_color = array('' => t('-None-'), 'dark' => t('Dark'), 'white' => t('White'), 'orange-2' => t('Orange'), 'gray' => t('Gray'), 'green' => t('Green'), 'yellow' => t('Yellow'), 'red' => t('Red'), 'pink' => t('Pink'), 'cyan' => t('Cyan'), 'violet' => t('Violet'), 'blue' => t('Blue'), 'brown' => t('Brown'), 'stone' => t('Stone'));
  $form['t_color'] = array(
    '#title' => t('Text color'),
    '#type' => 'select',
    '#options' => $text_color,
    '#default_value' => isset($attrs['t_color']) ? $attrs['t_color'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
  );
  $form['text_color'] = array(
    '#title' => t('Highlight color'),
    '#type' => 'select',
    '#options' => $text_color,
    '#default_value' => isset($attrs['text_color']) ? $attrs['text_color'] : 'orange-2',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
  );
  $form['description1'] = array(
    '#title' => t('Sub-title'),
    '#description' => t('Begin'),
    '#type' => 'textarea',
    '#default_value' => isset($attrs['description1']) ? $attrs['description1'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class = "row"><div class = "col-sm-12">',
  );
  $form['description2'] = array(
    '#description' => t('Highlight'),
    '#type' => 'textarea',
    '#default_value' => isset($attrs['description2']) ? $attrs['description2'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class = "row"><div class = "col-sm-12">',
  );
  $form['description3'] = array(
    '#description' => t('End'),
    '#type' => 'textarea',
    '#default_value' => isset($attrs['description3']) ? $attrs['description3'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div></div><div class = "row"><div class = "col-sm-12">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hasta_shortcodes_shortcode_list($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= 'iconlist ' . $attrs['color'];
  $text = '<ul' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</ul>';
  return $text;
}

function hasta_shortcodes_shortcode_list_settings($attrs, $text) {
  $color = array('dark' => t('Dark'), 'white' => t('White'), 'blue' => t('Blue'), 'pink' => t('Pink'), 'yellow' => t('Yellow'), 'orange2' => t('Orange'));
  $form['color'] = array(
    '#title' => t('Color'),
    '#type' => 'select',
    '#options' => $color,
    '#default_value' => isset($attrs['color']) ? $attrs['color'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hasta_shortcodes_shortcode_list_item($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $icon = isset($attrs['icon']) ? '<i class="' . $attrs['icon'] . '"></i>' : '';
  $text = isset($attrs['text']) ? $attrs['text'] : '';
  $text = '<li' . _hasta_shortcodes_shortcode_attributes($attrs) . '>' . $icon . $text . '</li>';
  return $text;
}

function hasta_shortcodes_shortcode_list_item_settings($attrs, $text) {
  $form['icon'] = array(
    '#title' => t('Icon'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'admin/ajax/nd_visualshortcodes/icons_autocomplete/font_awesome',
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-sm-12">',
    '#suffix' => '</div></div>',
  );
  $form['text'] = array(
    '#title' => t('Text'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['text']) ? $attrs['text'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class="row"><div class="col-sm-12">',
    '#suffix' => '</div></div>',
  );
  return $form;
}